{"version":3,"file":"static/js/32.2da5b803.chunk.js","mappings":"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","sources":["pages/Candidate/FacebookMeta/FBMetaLeadFilter.js","pages/Candidate/FacebookMeta/CandidateFaceBookMetaTable.js"],"sourcesContent":["/* eslint-disable default-case */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FBStyle from \"./candidateFacebookMeta.module.scss\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { MyModal, numbersOnlyTest } from \"../../../utility\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { AiOutlineClose, AiOutlinePhone } from \"react-icons/ai\";\r\nimport {\r\n  Autocomplete,\r\n  FormControl,\r\n  Stack,\r\n  TextField,\r\n  MenuItem,\r\n  Menu,\r\n  InputLabel,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport { FBmetaLeadsSliceActions } from \"../../../redux-store/store\";\r\nimport { GetAllsdminDetails, getJobFilterOptions } from \"../../../apiServices\";\r\nfunction FBinterviewFilter() {\r\n  const FBmetaListFilter = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter\r\n  );\r\n  const FBmetaListFilterRedDot = useSelector(\r\n    (state) => state.FbmetaLeadDetails.refreshRedDot\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter.size\r\n  );\r\n  const create = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter.createdTime\r\n  );\r\n  const ended = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter.endDate\r\n  );\r\n  const filterDetails = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter\r\n  );\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n\r\n  const [adminList, setAdminList] = useState([]);\r\n\r\n  const initialState = {\r\n    adminId: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n    candidateName: FBmetaListFilter.candidateName,\r\n    mobileNumber: FBmetaListFilter.mobileNumber,\r\n    educationQualification: FBmetaListFilter.educationQualification,\r\n    preferredLocation: FBmetaListFilter.preferredLocation,\r\n    jobCategory: FBmetaListFilter.jobCategory,\r\n    experience: FBmetaListFilter.experience,\r\n    whatsappNumber: FBmetaListFilter.whatsappNumber,\r\n    joiningAvailability: FBmetaListFilter.joiningAvailability,\r\n    notAttend: FBmetaListFilter.notAttend,\r\n    notQualified: FBmetaListFilter.notQualified,\r\n    noStatus: FBmetaListFilter.noStatus,\r\n    followUp: FBmetaListFilter.followUp,\r\n  };\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [options, setOptions] = useState({\r\n    educationQualification: [],\r\n    jobCategory: [],\r\n  });\r\n  const [dateRange, setDateRange] = useState({\r\n    start: filterDetails.createdTime,\r\n    end: filterDetails.endDate,\r\n    dateFilterType: filterDetails.dateFilterType,\r\n  });\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [showCustom, setshowCustom] = useState(false);\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n  const [selectStatus, setSelectStatus] = useState();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const firstTextFieldRef = useRef();\r\n  const secondTextFieldRef = useRef();\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    console.log(val);\r\n\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date();\r\n    // endDate.setDate(endDate.getDate() + 1);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const startDate = new Date();\r\n\r\n      startDate.setDate(today.getDate() - 7);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const startDate = new Date();\r\n      startDate.setMonth(startDate.getMonth() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const startDate = new Date(today);\r\n      startDate.setDate(today.getDate() - 13);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"yesterday\") {\r\n      const startDate = new Date();\r\n      startDate.setDate(startDate.getDate() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Yesterday\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    GetAllsdminDetails()\r\n      .then((data) => {\r\n        const activeAdmins = data.filter((item) => !item.Deactived);\r\n        setAdminList(activeAdmins);\r\n      })\r\n      .catch(() => {\r\n        alert(\"Something Went wrong\");\r\n      });\r\n  }, []);\r\n\r\n  function handleFieldChange(field, value) {\r\n    switch (field) {\r\n      case \"mobileNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          setFormData({ ...formData, [field]: value });\r\n        }\r\n        break;\r\n      case \"jobCategory\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n      case \"educationQualification\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n      case \"preferredLocation\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n      case \"joiningAvailability\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n      case \"experience\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n    }\r\n  }\r\n  const Dispatch = useDispatch();\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      FBmetaLeadsSliceActions.setFBmetaListFilter({\r\n        ...formData,\r\n        createdTime: dateRange.start || create,\r\n        endDate: dateRange.end || ended,\r\n        pages: 1,\r\n        size: size,\r\n        dateFilterType: dateRange.dateFilterType || \"\",\r\n        notAttend: selectStatus,\r\n        notQualified: selectStatus,\r\n        noStatus: selectStatus,\r\n        followUp: selectStatus,\r\n      })\r\n    );\r\n\r\n    const isFilterApplied =\r\n      formData.candidateName ||\r\n      formData.educationQualification ||\r\n      formData.mobileNumber ||\r\n      formData.whatsappNumber ||\r\n      formData.joiningAvailability ||\r\n      formData.adminId ||\r\n      formData.preferredLocation ||\r\n      formData.experience ||\r\n      formData.jobCategory ||\r\n      dateRange.start ||\r\n      dateRange.end;\r\n\r\n    Dispatch(\r\n      FBmetaLeadsSliceActions.setFBmetaListFilterRedDot(isFilterApplied)\r\n    );\r\n    setShowFilter(false);\r\n  };\r\n  const handleKeyPress = (e) => {\r\n    // Check if the Enter key is pressed (key code 13)\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  function handleAssignToChange(e) {\r\n    const { value } = e.target;\r\n    setFormData((prev) => ({ ...prev, adminId: value }));\r\n  }\r\n\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    setFormData({\r\n      adminId: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n      candidateName: \"\",\r\n      mobileNumber: \"\",\r\n      educationQualification: \"\",\r\n      jobCategory: \"\",\r\n      experience: \"\",\r\n      whatsappNumber: \"\",\r\n      joiningAvailability: \"\",\r\n      preferredLocation: \"\",\r\n      notAttend: \"\",\r\n      notQualified: \"\",\r\n      followUp: \"\",\r\n    });\r\n    // setSelectedValue(\"\");\r\n    setSelectStatus(\"\");\r\n    setDateRange({\r\n      start: null,\r\n      end: null,\r\n      dateFilterType: \"\",\r\n    });\r\n    setShowRedDot(false);\r\n    Dispatch(\r\n      FBmetaLeadsSliceActions.setFBmetaListFilter({\r\n        ...initialState,\r\n        createdTime: \"\",\r\n        endDate: \"\",\r\n        pages: 1,\r\n        size: size,\r\n        dateFilterType: \"\",\r\n      })\r\n    );\r\n  }\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      FBmetaLeadsSliceActions.setFBmetaListFilter({\r\n        ...formData,\r\n        pages: 1,\r\n        size: size,\r\n        createdTime: create,\r\n        endDate: ended,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n    setShowFilter(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(dateRange, \"dataRange\");\r\n  }, [dateRange]);\r\n  const salary = [\r\n    {\r\n      value: \"fresher\",\r\n      label: \"Fresher\",\r\n    },\r\n    {\r\n      value: \"1\",\r\n      label: \"1\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"2\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"3\",\r\n    },\r\n    {\r\n      value: \"4\",\r\n      label: \"4\",\r\n    },\r\n\r\n    {\r\n      value: \"5\",\r\n      label: \"5\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      label: \"6\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      label: \"7\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      label: \"8\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      label: \"9\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      label: \"10\",\r\n    },\r\n    {\r\n      value: \"11\",\r\n      label: \"11\",\r\n    },\r\n    {\r\n      value: \"12\",\r\n      label: \"12\",\r\n    },\r\n    {\r\n      value: \"13\",\r\n      label: \"13\",\r\n    },\r\n    {\r\n      value: \"14\",\r\n      label: \"14\",\r\n    },\r\n    {\r\n      value: \"15+\",\r\n      label: \"15+\",\r\n    },\r\n  ];\r\n  // const handleChange = (e) => {\r\n  //   const { name, value } = e.target;\r\n  //   setSelectStatus({\r\n  //     ...selectStatus,\r\n  //     [name]: value === \"notAttend\" || \"notQualified\" ? true : false,\r\n  //   });\r\n  // };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setSelectStatus(value);\r\n  };\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        jobCategory: data.filter((el) => el.category == \"job category\"),\r\n        educationQualification: data\r\n          .filter((element) => element.category == \"qualification\")\r\n          .filter((_, index) => index !== 1),\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  const updateJobCategory = (event) => {\r\n    setFormData({ ...formData, jobCategory: event.options });\r\n  };\r\n  const updateQualification = (event) => {\r\n    setFormData({ ...formData, educationQualification: event.options });\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid = dateRange.start && dateRange.end;\r\n\r\n    if (!dateRange.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleApplyCustomDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n      console.log(\"Form submitted:\", dateRange);\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${FBStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />{\" \"}\r\n          <p\r\n            style={{\r\n              backgroundColor: FBmetaListFilterRedDot ? \"red\" : \"transparent\",\r\n              width: \"8px\",\r\n              height: \"8px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>{\" \"}\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <>\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <h4 className=\"text-center mb-2\">Filter by</h4>\r\n                  <h3>\r\n                    <span\r\n                      onClick={handleClickCross}\r\n                      className=\"btn btn-outline-danger\"\r\n                      style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                    >\r\n                      <AiOutlineClose />\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div className={`${FBStyle.BoxContainerWidth}`}>\r\n                  <>\r\n                    <form\r\n                      onSubmit={(e) => {\r\n                        handleSubmit(e);\r\n                      }}\r\n                    >\r\n                      <Stack className=\"mt-1\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <TextField\r\n                              id=\"outlined-basic-1\"\r\n                              label=\"Mobile number\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              value={formData.mobileNumber}\r\n                              // inputProps={{ maxLenth: 10 }}\r\n                              onChange={(event) =>\r\n                                // event.target.value.length <= 10 &&\r\n                                handleFieldChange(\r\n                                  \"mobileNumber\",\r\n                                  event.target.value\r\n                                )\r\n                              }\r\n                              inputProps={{ maxLength: 10 }}\r\n                              InputProps={{\r\n                                // onKeyPress: (e) => {\r\n                                //   if (e.key === \"Enter\") {\r\n                                //     e.preventDefault();\r\n                                //     handleSubmit(e);\r\n                                //   }\r\n                                // },\r\n                                startAdornment: (\r\n                                  <span\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    <AiOutlinePhone\r\n                                      style={{ marginRight: \"5px\" }}\r\n                                    />{\" \"}\r\n                                    +91\r\n                                  </span>\r\n                                ),\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <FormControl variant=\"outlined\" fullWidth>\r\n                              <TextField\r\n                                label=\"Created on\"\r\n                                id=\"basic-button\"\r\n                                value={`${dateRange.dateFilterType}`}\r\n                                // value={`${dateRange.start} - ${dateRange.end}`}\r\n                                aria-controls={open ? \"basic-menu\" : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                aria-expanded={open ? \"true\" : undefined}\r\n                                onClick={handleClick}\r\n                              ></TextField>\r\n                              <Menu\r\n                                id=\"basic-menu\"\r\n                                anchorEl={anchorEl}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                fullWidth\r\n                                MenuListProps={{\r\n                                  \"aria-labelledby\": \"basic-button\",\r\n                                }}\r\n                                style={{ width: \"100%\" }}\r\n                              >\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"today\");\r\n                                  }}\r\n                                  style={{ width: \"250px\" }}\r\n                                >\r\n                                  Today\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"yesterday\");\r\n                                  }}\r\n                                >\r\n                                  Yesterday\r\n                                </MenuItem>\r\n\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastWeek\");\r\n                                  }}\r\n                                >\r\n                                  Last 1 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastTwoWeeks\");\r\n                                  }}\r\n                                >\r\n                                  Last 2 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastMonth\");\r\n                                  }}\r\n                                >\r\n                                  Last Month\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"custom\");\r\n                                  }}\r\n                                >\r\n                                  Custom Date\r\n                                </MenuItem>\r\n                              </Menu>\r\n                            </FormControl>\r\n                            {/*  */}\r\n                            {showCustom && (\r\n                              <MyModal>\r\n                                <ModalContainer\r\n                                  zIndex={1005}\r\n                                  childComponent={\r\n                                    <div\r\n                                      style={{\r\n                                        minWidth: \"400px\",\r\n                                        width: \"auto\",\r\n                                      }}\r\n                                    >\r\n                                      <>\r\n                                        <div>\r\n                                          <form>\r\n                                            <p className=\"text-center \">\r\n                                              Select Custom Date{\" \"}\r\n                                            </p>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"start\">\r\n                                                From\r\n                                              </label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.start\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"start\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"startDate\"\r\n                                                  )\r\n                                                }\r\n                                                value={dateRange.start}\r\n                                                name=\"trip-start\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.start && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  Start date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"end\">To</label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.end\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                value={dateRange.end}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"end\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"endDate\"\r\n                                                  )\r\n                                                }\r\n                                                name=\"trip-end\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.end && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  End date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-end mt-3 \">\r\n                                              <button\r\n                                                onClick={() => {\r\n                                                  setValidationErrors({\r\n                                                    start: false,\r\n                                                    end: false,\r\n                                                  });\r\n                                                  setshowCustom(false);\r\n                                                }}\r\n                                                style={{\r\n                                                  backgroundColor: \"#b2261c\",\r\n                                                }}\r\n                                                className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                              >\r\n                                                Close\r\n                                              </button>\r\n                                              <button\r\n                                                onClick={handleApplyCustomDate}\r\n                                                // color=\"primary\"\r\n                                                className=\"btn rounded-pill text-white px-4\"\r\n                                                style={{\r\n                                                  backgroundColor: \"#169C50\",\r\n                                                }}\r\n                                              >\r\n                                                Apply\r\n                                              </button>\r\n                                            </div>\r\n                                          </form>\r\n                                        </div>\r\n                                      </>\r\n                                    </div>\r\n                                  }\r\n                                />\r\n                              </MyModal>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <Autocomplete\r\n                              id=\"tags-outlined\"\r\n                              options={options.jobCategory.map(\r\n                                (option) => option\r\n                              )}\r\n                              fullWidth\r\n                              getOptionLabel={(option) => `${option.options}`}\r\n                              // onChange={(event, value) => {\r\n                              //   updateJobCategory(value);\r\n                              //   console.log(value, \"value jobs\");\r\n                              // }}\r\n                              onChange={(event, value, reason) => {\r\n                                if (reason === \"clear\") {\r\n                                  console.log(\"Selection cleared\");\r\n                                  updateJobCategory(\"\");\r\n                                } else {\r\n                                  updateJobCategory(value);\r\n                                  console.log(value, \"value jobs\");\r\n                                }\r\n                              }}\r\n                              value={{\r\n                                options: formData.jobCategory\r\n                                  ? formData.jobCategory\r\n                                  : \"\",\r\n                                category: \"job category\",\r\n                              }}\r\n                              filterSelectedOptions\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Job category\"\r\n                                  placeholder=\"Job category\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <TextField\r\n                              onChange={(event) =>\r\n                                handleFieldChange(\r\n                                  \"experience\",\r\n                                  event.target.value\r\n                                )\r\n                              }\r\n                              value={formData.experience}\r\n                              name=\"experience\"\r\n                              id=\"experience\"\r\n                              className=\"form-control\"\r\n                              select\r\n                              label=\"Experience\"\r\n                            >\r\n                              {salary.map((option) => (\r\n                                <MenuItem\r\n                                  key={option.value}\r\n                                  value={option.value}\r\n                                >\r\n                                  {option.label}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <Autocomplete\r\n                              id=\"tags-outlined\"\r\n                              options={options.educationQualification.map(\r\n                                (option) => option\r\n                              )}\r\n                              fullWidth\r\n                              getOptionLabel={(option) => `${option.options}`}\r\n                              // onChange={(event, value) => {\r\n                              //   updateQualification(value);\r\n                              //   console.log(value, \"value jobs\");\r\n                              // }}\r\n                              onChange={(event, value, reason) => {\r\n                                if (reason === \"clear\") {\r\n                                  console.log(\"Selection cleared\");\r\n                                  updateQualification(\"\");\r\n                                } else {\r\n                                  updateQualification(value);\r\n                                  console.log(value, \"value jobs\");\r\n                                }\r\n                              }}\r\n                              value={{\r\n                                options: formData.educationQualification\r\n                                  ? formData.educationQualification\r\n                                  : \"\",\r\n                                category: \"qualification\",\r\n                              }}\r\n                              filterSelectedOptions\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Qualification\"\r\n                                  placeholder=\"Qualification\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <TextField\r\n                              id=\"outlined-basic-2\"\r\n                              label=\"Preferred City\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              value={formData.preferredLocation}\r\n                              InputProps={{\r\n                                onKeyPress: (e) => {\r\n                                  if (e.key === \"Enter\") {\r\n                                    handleSubmit(e);\r\n                                  }\r\n                                },\r\n                              }}\r\n                              onChange={(event) => {\r\n                                //   console.log(event.target.value);\r\n                                handleFieldChange(\r\n                                  \"preferredLocation\",\r\n                                  event.target.value\r\n                                );\r\n                              }}\r\n                            />\r\n                          </div>\r\n\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            {/* <FormControl component=\"fieldset\">\r\n                              <RadioGroup row aria-label=\"status\" name=\"status\">\r\n                                <FormControlLabel\r\n                                  value={true}\r\n                                  control={<Radio />}\r\n                                  label=\"Not Attend\"\r\n                                  name=\"notAttend\"\r\n                                  checked={selectStatus.notAttend}\r\n                                  onChange={handleChange}\r\n                                />\r\n                                <FormControlLabel\r\n                                  value={true}\r\n                                  control={<Radio />}\r\n                                  label=\"Not Qualified\"\r\n                                  name=\"notQualified\"\r\n                                  checked={selectStatus.notQualified}\r\n                                  onChange={handleChange}\r\n                                />\r\n                              </RadioGroup>\r\n                            </FormControl> */}\r\n                            <FormControl fullWidth>\r\n                              <InputLabel id=\"demo-simple-select-label\">\r\n                                Status\r\n                              </InputLabel>\r\n                              <Select\r\n                                fullWidth\r\n                                value={selectStatus}\r\n                                onChange={handleChange}\r\n                                name=\"\"\r\n                                label=\"Status\"\r\n                                defaultValue={\"\"}\r\n                              >\r\n                                <MenuItem value={\"Not Attend\"}>\r\n                                  Not Attend\r\n                                </MenuItem>\r\n                                <MenuItem value={\"Not Qualifed\"}>\r\n                                  Not Qualified\r\n                                </MenuItem>\r\n                                <MenuItem value={\"Follow Up\"}>\r\n                                  Follow Up\r\n                                </MenuItem>\r\n                                <MenuItem value={\"No Status\"}>\r\n                                  No Status\r\n                                </MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            {adminList && isSuperAdmin && (\r\n                              <TextField\r\n                                onChange={(e) => handleAssignToChange(e)}\r\n                                name=\"AssignedTo\"\r\n                                id=\"AssignedTo\"\r\n                                className=\"form-control\"\r\n                                select\r\n                                label=\"Assigned To\"\r\n                                value={formData.adminId}\r\n                                defaultValue={formData.adminId}\r\n                              >\r\n                                <MenuItem value={0}>ALL</MenuItem>\r\n                                {adminList.map((el) => (\r\n                                  <MenuItem key={el.id} value={el.id}>\r\n                                    {el.userName}\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </TextField>\r\n                            )}\r\n                          </div>\r\n                          {/* <div className=\"col-sm-3\">\r\n                            <FormControl>\r\n                              <Select\r\n                                value={selectStatus.notQualified}\r\n                                onChange={handleChange}\r\n                                name=\"notQualified\"\r\n                              >\r\n                                <MenuItem value=\"true\">Not Qualified</MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div> */}\r\n                        </div>\r\n                        <div className=\"d-flex flex-row gap-2 justify-content-end mt-4\">\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.Filterbutton}`}\r\n                            variant=\"outlined\"\r\n                            onClick={(e) => {\r\n                              handleClear(e);\r\n                            }}\r\n                          >\r\n                            Clear All\r\n                          </button>\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.search}`}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ minWidth: \"150px\" }}\r\n                          >\r\n                            Search\r\n                            {/* {!formData.loading && !formData.completed && \"Search\"}\r\n\r\n                          {\r\n                            formData.loading && (\r\n                              <div className=\"spinner-border spinner-border-sm text-light\"></div>\r\n                            ) // Add spinner here\r\n                          }\r\n                          {formData.completed && \"Submitted\"} */}\r\n                          </button>\r\n                        </div>\r\n                      </Stack>\r\n                    </form>\r\n                  </>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FBinterviewFilter;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react/jsx-pascal-case */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  PostCandidateFBmeta,\r\n  PutFBmetaIsQualified,\r\n  updateMetaSeenStatus,\r\n  PostFollowup,\r\n  GetFollowUpEvents,\r\n  GetAllsdminDetails,\r\n  GetCandidateQualifyDetials,\r\n  PutCandidateType,\r\n  PutExperienceStatus,\r\n} from \"../../../apiServices\";\r\nimport { showHideDetailsActions } from \"../../../redux-store/store\";\r\nimport { DDMMYYYY_formate, MyModal, textTruncate } from \"../../../utility\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\nimport FBstyle from \"./candidateFacebookMeta.module.scss\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport styles from \"../../../components/candidate-qualify-forms/CommonQualify.module.scss\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\nimport TimelineFacebookMeta from \"./TimelineFacebookMeta\";\r\nimport FBinterviewFilter from \"./FBMetaLeadFilter\";\r\nimport accordionstyle from \"../CandidateQualifyForm/QualifyForm.module.scss\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  Pagination,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { FBmetaLeadsSliceActions } from \"../../../redux-store/store\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport Table from \"@mui/material/Table\";\r\nimport { DemoContainer } from \"@mui/x-date-pickers/internals/demo\";\r\nimport { DateTimePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport QualifyForm from \"./components/qualifyForm\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport dayjs from \"dayjs\";\r\nimport canLeadStyle from \"../CandidateLeadTable/candidateLead.module.scss\";\r\nimport CandidateFBLeadDetailsview from \"../../../components/ModalPopups/CandidateDetails/FBLeadDetailsview\";\r\nimport YourComponent from \"../../../components/candidate-qualify-forms/refrense\";\r\nimport Registered from \"../../../assets/images/registeredR.png\";\r\nimport LeadL from \"../../../assets/images/LeadL.png\";\r\nimport AddNotesFBLead from \"./PostCandidateNotes\";\r\nimport ExperienceQualify from \"../../../components/candidate-qualify-forms/ExperienceQualify\";\r\nimport ExperienceWithNoExperience from \"../../../components/candidate-qualify-forms/ExperienceWithNoExperience\";\r\nimport QualifyFresherform from \"../CandidateQualifyForm/FresherForm\";\r\nimport ExperinenceWorkingform from \"../CandidateQualifyForm/ExperinenceWorkingform\";\r\n\r\nimport ExperienceForm from \"../CandidateQualifyForm/ExperienceForm\";\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#d2d2d2\",\r\n    color: \"#545454f0\",\r\n    padding: \"8px\",\r\n    // Adjust the width as needed\r\n    // overflowX: \"auto\",\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"8px\",\r\n    borderBottom: \"1px solid #545454f0\",\r\n    // width: \"300px\", // Adjust the width as needed\r\n    // overflowX: \"auto\",\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n}));\r\nfunction CandidateFaceBookMetaTable() {\r\n  const [CandidateFBList, setCandidateFBList] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n  const [openform, setopenform] = useState(false);\r\n  const [pagesCount, setPagesCount] = useState({\r\n    totalPages: 0,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n  });\r\n  const [followupError, setFollowupError] = useState({\r\n    dateTime: false,\r\n    addNotes: false,\r\n    selectEvent: false,\r\n  });\r\n  const [currentMetaDetail, setCurrentMetaDetail] = useState();\r\n  console.log(currentMetaDetail);\r\n  // const mobileNumber = currentMetaDetail.mobileNumber;\r\n  // console.log(mobileNumber);\r\n  const [showConfirmationPopup, setShowConfirmPopup] = useState(false);\r\n  const [eventData, setEventData] = useState([]);\r\n  const [notesOpen, setNotesOpen] = useState(false);\r\n  const [followupopen, setFollowupOpen] = useState(false);\r\n  const [formattedDate, setFormattedDate] = useState(null);\r\n  const [dateTime, setDateTime] = useState(\"\");\r\n  const [Follownotes, setFollownotes] = useState(\"\");\r\n  const [dateTimeError, setDateTimeError] = useState(\"\");\r\n  const [notesError, setNotesError] = useState(\"\");\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [showLoader, setShowLoader] = useState(false); // New state for loader\r\n  const [openCreateReport, setOpenCreateReport] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [showSuccessForm, setshowSuccessForm] = useState(false);\r\n  const [isFresher, setIsFresher] = useState(null);\r\n  const [showInitialRadios, setShowInitialRadios] = useState(true);\r\n  const [showCurrentlyWorkingComponent, setShowCurrentlyWorkingComponent] =\r\n    useState(false);\r\n  const [showNotWorkingComponent, setShowNotWorkingComponent] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n  const [showAlreadyRegister, setshowAlreadyRegister] = useState(false);\r\n\r\n  const FBmetaListFilter = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter\r\n  );\r\n  const unseenCount = useSelector(\r\n    (state) => state.unseenCountDetails.candidate\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter.size\r\n  );\r\n  const refreshRedDot = useSelector(\r\n    (state) => state.FbmetaLeadDetails.FBmetaListFilter.refreshRedDot\r\n  );\r\n\r\n  const [showRedDot, setShowRedDot] = useState(refreshRedDot);\r\n  const [OpenConfirmation, setopenConfirmation] = useState(false);\r\n  const [assignAdminto, setAssignAdminto] = useState({\r\n    metaLeadId: \"\",\r\n    adminId: \"\",\r\n  });\r\n  const [putFBLead, setFBputLead] = useState({\r\n    id: \"\",\r\n    qualified: false,\r\n    notQualified: false,\r\n    notAttend: false,\r\n    followUp: false,\r\n    notes: \"\",\r\n  });\r\n  useEffect(() => {\r\n    // Your side effects or state updates go here\r\n  }, [putFBLead]);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  useEffect(() => {\r\n    console.log(FBmetaListFilter, \"interview filter\");\r\n  }, [FBmetaListFilter]);\r\n\r\n  const [leadDetails, setLeadDetails] = useState({\r\n    show: false,\r\n    date: {},\r\n  });\r\n\r\n  const ShowTimeline = useSelector(\r\n    (state) => state.showHideDetails.candidateLead.leadTimeLine\r\n  );\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n  const [adminName, setAdminName] = useState([]);\r\n  const [adminid, setAdminId] = useState([]);\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n\r\n      const activeAdmins = data.filter((item) => !item.Deactived);\r\n\r\n      const adminNames = activeAdmins.map((item) => item.userName);\r\n      const adminIds = activeAdmins.map((item) => item.id);\r\n      console.log(adminNames);\r\n      setAdminName(adminNames);\r\n      setAdminId(adminIds);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    // to set super admin id as 0\r\n    let id = isSuperAdmin ? 0 : localStorage.getItem(\"adminID\");\r\n    Dispatch(FBmetaLeadsSliceActions.setFBmetaListFilterAdminId(id));\r\n  }, []);\r\n\r\n  function handleCloseNotes() {\r\n    setShowConfirmPopup(false);\r\n    // setIsNotesEmpty(false);\r\n  }\r\n\r\n  const handleRadioButtonChange = (event) => {\r\n    const { value } = event.target;\r\n    setIsFresher(value === \"Fresher\");\r\n    setShowInitialRadios(value !== \"Experienced\");\r\n    setShowCurrentlyWorkingComponent(false);\r\n    setShowNotWorkingComponent(false);\r\n  };\r\n\r\n  const handleCurrentlyWorkingChange = (event) => {\r\n    const { value } = event.target;\r\n    if (value === \"Currently Working\") {\r\n      setShowCurrentlyWorkingComponent(true);\r\n      setShowNotWorkingComponent(false);\r\n    } else if (value === \"Currently Not Working\") {\r\n      setShowNotWorkingComponent(true);\r\n      setShowCurrentlyWorkingComponent(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenCreateReport(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenCreateReport(false);\r\n  };\r\n  const hanndleClose = () => {\r\n    setIsFresher(false);\r\n    setShowCurrentlyWorkingComponent(false);\r\n    setShowNotWorkingComponent(false);\r\n    setOpenCreateReport(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsFresher(false);\r\n    // setShowCurrentlyWorkingComponent(false);\r\n    // setShowNotWorkingComponent(false);\r\n  };\r\n\r\n  const openFollowup = () => {\r\n    setFollowupOpen(true);\r\n  };\r\n\r\n  // const closeFollowup = () => {\r\n  //   setFollowupOpen(false);\r\n  //   PostCandidateFBmeta(FBmetaListFilter).then((data) => {\r\n  //     setCandidateFBList(data.metaLeadsList);\r\n  //     setPagesCount((prev) => ({\r\n  //       ...prev,\r\n  //       totalPages: Math.ceil(data.totalCount / size), // Assuming size is 10\r\n  //     }));\r\n  //   });\r\n  // };\r\n  const closeFollowup = () => {\r\n    setFollowupOpen(false);\r\n    setFollowupError((prev) => ({\r\n      ...prev,\r\n      dateTime: false,\r\n      addNotes: false,\r\n      selectEvent: false,\r\n    }));\r\n    setFormattedDate(\"\");\r\n    setFollownotes(\"\");\r\n    setSelectedValue(\"\");\r\n    PostCandidateFBmeta(FBmetaListFilter).then((data) => {\r\n      setCandidateFBList(data.metaLeadsList);\r\n      setPagesCount((prev) => ({\r\n        ...prev,\r\n        totalPages: Math.ceil(data.totalCount / size), // Assuming size is 10\r\n      }));\r\n    });\r\n  };\r\n\r\n  const handleFollowSubmit = async () => {\r\n    if (!formattedDate) {\r\n      setFollowupError((prev) => ({\r\n        ...prev,\r\n        dateTime: true,\r\n      }));\r\n      return;\r\n    } else if (Follownotes.trim() === \"\") {\r\n      setFollowupError((prev) => ({\r\n        ...prev,\r\n        addNotes: true,\r\n      }));\r\n      return;\r\n    } else {\r\n      try {\r\n        const formattedDateTime = dayjs(dateTime);\r\n        const formattedDate = formattedDateTime.format(\"YYYY-MM-DD\");\r\n        const followUpTime = formattedDateTime.format(\"hh:mm A\");\r\n\r\n        console.log(\"Formatted Date:\", formattedDate);\r\n        console.log(\"Follow-Up Time:\", followUpTime);\r\n\r\n        await PostFollowup(\r\n          currentMetaDetail.id,\r\n          null,\r\n          null,\r\n          formattedDate,\r\n          followUpTime,\r\n          Follownotes,\r\n          \"Facebook meta lead\"\r\n        );\r\n\r\n        setFormattedDate(\"\");\r\n        setSelectedValue(\"\");\r\n        setFollownotes(\"\");\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n        }, 3000);\r\n        closeFollowup();\r\n      } catch (error) {\r\n        console.error(\"There was a problem with the API call:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    // setCandidateFBList({\r\n    //   gender: null,\r\n    //   mobileNumber: -1,\r\n    //   assignTo: null,\r\n    //   status: null,\r\n    //   industry: null,\r\n    //   jobCategory: null,\r\n    //   qualification: null,\r\n    //   candidateType: null,\r\n    //   skills: null,\r\n    //   prefLocation: null,\r\n    //   eligibility: null,\r\n    //   passed_out_year: -1,\r\n    //   specification: null,\r\n    //   maxExperience: -1,\r\n    //   experience: -1,\r\n    //   endDate: null,\r\n    //   createdTime: null,\r\n    //   page: 1,\r\n    //   size: 10,\r\n    // });\r\n\r\n    // Fetch data after resetting\r\n    PostCandidateFBmeta(FBmetaListFilter)\r\n      .then((data) => {\r\n        setCandidateFBList(data.metaLeadsList);\r\n        setPagesCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size), // Assuming size is 10\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n  const handleReloadpage = () => {\r\n    setShowConfirmPopup(false);\r\n    setShowCurrentlyWorkingComponent(false);\r\n    setShowNotWorkingComponent(false);\r\n    setShowLoader(true);\r\n\r\n    PostCandidateFBmeta(FBmetaListFilter)\r\n      .then((data) => {\r\n        setCandidateFBList(data.metaLeadsList);\r\n        setPagesCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch follow-up events data when component mounts\r\n    async function fetchEventData() {\r\n      try {\r\n        const data = await GetFollowUpEvents();\r\n        setEventData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching follow-up events:\", error);\r\n      }\r\n    }\r\n\r\n    fetchEventData();\r\n  }, []);\r\n\r\n  function ReloadList() {\r\n    PostCandidateFBmeta(FBmetaListFilter).then((data) => {\r\n      console.log(data, \"metaLeadsList data\");\r\n      setCandidateFBList(data.metaLeadsList);\r\n      setShowLoader(false);\r\n      setPagesCount((prev) => ({\r\n        ...prev,\r\n        totalPages: Math.ceil(data.totalCount / size),\r\n      }));\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setShowLoader(true);\r\n    ReloadList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setShowLoader(true);\r\n\r\n    PostCandidateFBmeta(FBmetaListFilter)\r\n      .then((data) => {\r\n        setCandidateFBList(data.metaLeadsList);\r\n        setTotalCount(data.totalCount);\r\n        setPagesCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  }, [FBmetaListFilter]);\r\n\r\n  const showLeadDetails = (data, show) => {\r\n    setLeadDetails((prev) => ({ ...prev, data: data, show: show }));\r\n  };\r\n  function capitalizeWords(str) {\r\n    return str ? str.replace(/\\b\\w/g, (char) => char.toUpperCase()) : \"\";\r\n  }\r\n  function formatExperience(experience) {\r\n    if (experience) {\r\n      if (experience.toLowerCase() === \"fresher\") {\r\n        return capitalizeWords(experience);\r\n      } else {\r\n        // Assuming experience is a number representing the years of experience\r\n        return ` ${experience} year${experience > 1 ? \"s\" : \"\"}(s)`;\r\n      }\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n  function copyToClipboard(text) {\r\n    const textField = document.createElement(\"textarea\");\r\n    textField.innerText = text;\r\n    document.body.appendChild(textField);\r\n    textField.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(textField);\r\n    // const cell = document.activeElement;\r\n    // cell.title = \"Copied\";\r\n  }\r\n\r\n  // const handleCheckboxClick = () => {\r\n  //   // event.stopPropagation();\r\n  //   setIsChecked(!isChecked);\r\n  // };\r\n  const handleIsQualified = (status) => {\r\n    if (status === \"notQualified\") {\r\n      setFBputLead((prev) => ({\r\n        ...prev,\r\n        id: currentMetaDetail.id,\r\n        qualified: false,\r\n        notQualified: true,\r\n        notAttend: false,\r\n      }));\r\n    } else if (status === \"qualified\") {\r\n      setFBputLead((prev) => ({\r\n        ...prev,\r\n        id: currentMetaDetail.id,\r\n        qualified: true,\r\n        notQualified: false,\r\n        notAttend: false,\r\n      }));\r\n    } else if (status === \"followup\") {\r\n      setFBputLead((prev) => ({\r\n        ...prev,\r\n        id: currentMetaDetail.id,\r\n        qualified: false,\r\n        notQualified: false,\r\n        notAttend: false,\r\n        followup: true,\r\n      }));\r\n    } else {\r\n      setFBputLead((prev) => ({\r\n        ...prev,\r\n        id: currentMetaDetail.id,\r\n        qualified: false,\r\n        notQualified: false,\r\n        notAttend: true,\r\n      }));\r\n    }\r\n    //   setSelectshow(false);\r\n\r\n    // const selectedCandidate = CandidateFBList.find(\r\n    //   (candidate) => candidate.facebookMetaLead.id === id\r\n    // );\r\n    // if (selectedCandidate) {\r\n    //   setContactPersonName(selectedCandidate.facebookMetaLead.candidateName);\r\n    // }\r\n  };\r\n  function handleConfirmationClose() {\r\n    setShowConfirmPopup(false);\r\n  }\r\n  function handleConfirmationOpen() {\r\n    setShowConfirmPopup(true);\r\n    GetCandidateQualifyDetials(currentMetaDetail.mobileNumber)\r\n      .then((data) => {\r\n        console.log(data, \"dataAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n        if (data && data.canLeadDetails) {\r\n          setSelectedOption(\r\n            data.canLeadDetails?.experienced === true ? \"experience\" : \"fresher\"\r\n          );\r\n        } else {\r\n          console.error(\"CanLeadDetails not available in data:\", data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching candidate details:\", error);\r\n      });\r\n  }\r\n\r\n  // function ConfirmFormSubmit(notes) {\r\n  //   setShowLoader(true);\r\n  //   if (putFBLead.id) {\r\n  //     PutFBmetaIsQualified(putFBLead, notes)\r\n  //       .then(() => {\r\n  //         setShowConfirmPopup(false);\r\n  //         // console.log(data, \"jksldhjsjkshsdtyu\");\r\n  //         PostCandidateFBmeta(FBmetaListFilter)\r\n  //           .then((data) => {\r\n  //             console.log(data, \"metaLeadsList data\");\r\n\r\n  //             setCandidateFBList(data.metaLeadsList);\r\n  //             setPagesCount((prev) => ({\r\n  //               ...prev,\r\n  //               totalPages: Math.ceil(data.totalCount / size),\r\n  //             }));\r\n  //           })\r\n  //           .catch((err) => {\r\n  //             alert(`Somthing went wrong, Error ${err}`);\r\n  //           })\r\n  //           .finally(() => {\r\n  //             setShowLoader(false);\r\n  //           });\r\n  //       })\r\n  //       .catch((err) => {\r\n  //         alert(`Somthing went wrong, Error ${err}`);\r\n  //       });\r\n  //   }\r\n  // }\r\n  function ConfirmFormSubmit(notes) {\r\n    setShowLoader(true);\r\n    if (putFBLead.id) {\r\n      PutFBmetaIsQualified(putFBLead, notes)\r\n        .then(() => {\r\n          setShowConfirmPopup(false);\r\n          // console.log(data, \"jksldhjsjkshsdtyu\");\r\n          PostCandidateFBmeta(FBmetaListFilter)\r\n            .then((data) => {\r\n              console.log(data, \"metaLeadsList data\");\r\n\r\n              setCandidateFBList(data.metaLeadsList);\r\n              setPagesCount((prev) => ({\r\n                ...prev,\r\n                totalPages: Math.ceil(data.totalCount / size),\r\n              }));\r\n            })\r\n            .catch((err) => {\r\n              alert(`Somthing went wrong, Error ${err}`);\r\n            })\r\n            .finally(() => {\r\n              setShowLoader(false);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          alert(`Somthing went wrong, Error ${err}`);\r\n        });\r\n    }\r\n  }\r\n  function ConfirmQualifyFormSubmit(notes) {\r\n    setShowLoader(true);\r\n    if (putFBLead.id) {\r\n      PostCandidateFBmeta(FBmetaListFilter)\r\n        .then((data) => {\r\n          console.log(data, \"metaLeadsList data\");\r\n\r\n          setCandidateFBList(data.metaLeadsList);\r\n          setPagesCount((prev) => ({\r\n            ...prev,\r\n            totalPages: Math.ceil(data.totalCount / size),\r\n          }));\r\n        })\r\n        .catch((err) => {\r\n          alert(`Something went wrong, Error ${err}`);\r\n        })\r\n        .finally(() => {\r\n          setShowLoader(false);\r\n          setShowConfirmPopup(false);\r\n        });\r\n    }\r\n  }\r\n  const Dispatch = useDispatch();\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n\r\n    Dispatch(FBmetaLeadsSliceActions.setFBmetaListFilterPage(currentPage));\r\n  }\r\n  function candidateSize(size) {\r\n    Dispatch(FBmetaLeadsSliceActions.setFBmetaListFilterSize(size));\r\n  }\r\n  const inputRef = {\r\n    qualified: useRef(),\r\n    notQualified: useRef(),\r\n    notAttend: useRef(),\r\n    followup: useRef(),\r\n    // rescheduled: useRef(),\r\n  };\r\n  const handleButtonClick = (refName) => {\r\n    const ref = inputRef[refName];\r\n    if (ref.current) {\r\n      ref.current.click();\r\n    }\r\n  };\r\n\r\n  const showCity = (val) => {\r\n    if (val !== \"i_am_looking_for_job_in_other_city\") {\r\n      return capitalizeWords(val);\r\n    } else {\r\n      return \"Other\";\r\n    }\r\n  };\r\n\r\n  function updateNotes(data) {\r\n    setFBputLead((prev) => ({\r\n      ...prev,\r\n      notes: data,\r\n    }));\r\n  }\r\n  function handleTimeLinePopup(value, FbId) {\r\n    Dispatch(\r\n      showHideDetailsActions.setCandidateLeadDetails({\r\n        showTimeLine: value,\r\n        facebookId: FbId,\r\n      })\r\n    );\r\n  }\r\n\r\n  function updateSeenStatus(id) {\r\n    if (!isSuperAdmin) {\r\n      updateMetaSeenStatus(id).then(() => {\r\n        ReloadList();\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleOptionChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedOption(selectedValue);\r\n\r\n    let experiencedValue = false;\r\n    if (selectedValue === \"experience\") {\r\n      experiencedValue = true;\r\n    }\r\n\r\n    PutCandidateType(experiencedValue, currentMetaDetail.mobileNumber, \"\").then(\r\n      (data) => {\r\n        if (\r\n          data.message === \"Candidate with this mobile number already exists\"\r\n        ) {\r\n          setshowAlreadyRegister(true);\r\n          handleCloseQualifyForm();\r\n          // setShowConfirmPopup(false);\r\n          return;\r\n        }\r\n        console.log(\r\n          \"Data Format\",\r\n          data,\r\n          \"mobile number \",\r\n          currentMetaDetail.mobileNumber\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  // useEffect(() => {}, []);\r\n  const [selectCandidateStatus, setselectCandidateStatus] = useState(\"\");\r\n  const handleCandidateStatus = (event) => {\r\n    const selectedValue = event.target.value;\r\n    setselectCandidateStatus(selectedValue);\r\n\r\n    let currentlyWorkingValue = false;\r\n    if (selectedValue === \"currentlyWorking\") {\r\n      currentlyWorkingValue = true;\r\n    }\r\n\r\n    PutExperienceStatus(\r\n      currentMetaDetail.mobileNumber,\r\n      currentlyWorkingValue\r\n    ).then((data) => {\r\n      console.log(\r\n        \"Data Format\",\r\n        data,\r\n        \"mobile number \",\r\n        currentMetaDetail.mobileNumber\r\n      );\r\n    });\r\n  };\r\n  function handleCloseQualifyForm() {\r\n    setSelectedOption(\"\");\r\n    setShowConfirmPopup(false);\r\n    PostCandidateFBmeta(FBmetaListFilter)\r\n      .then((data) => {\r\n        console.log(data, \"metaLeadsList data\");\r\n\r\n        setCandidateFBList(data.metaLeadsList);\r\n        setPagesCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        alert(`Something went wrong, Error ${err}`);\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n        setShowConfirmPopup(false);\r\n      });\r\n  }\r\n  function handleQualifyFormSubmit() {\r\n    setshowSuccessForm(true);\r\n\r\n    setTimeout(() => {\r\n      setshowSuccessForm(false);\r\n      setSelectedOption(\"\");\r\n      setShowConfirmPopup(false);\r\n    }, 1000);\r\n    PostCandidateFBmeta(FBmetaListFilter)\r\n      .then((data) => {\r\n        console.log(data, \"metaLeadsList data\");\r\n\r\n        setCandidateFBList(data.metaLeadsList);\r\n        setPagesCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        alert(`Something went wrong, Error ${err}`);\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n        setShowConfirmPopup(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={`${FBstyle.FilterHead}`}>\r\n        {\" \"}\r\n        <div className=\"d-flex \">\r\n          Show {\"  \"}\r\n          <select\r\n            name=\"\"\r\n            id=\"\"\r\n            className=\"px-1 py-1 mx-2\"\r\n            onChange={(event) => candidateSize(event.target.value)}\r\n          >\r\n            <option selected value=\"10\">\r\n              10\r\n            </option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n          </select>\r\n          {\"   \"}\r\n          Entries\r\n        </div>\r\n        <div className={`${canLeadStyle.filterAdduser}`}>\r\n          <div className=\"mt-1 me-2\">Total Count : {totalCount}</div>\r\n          <div\r\n            className=\"p-1 success me-2 mx-2 ms-auto \"\r\n            onClick={handleReset}\r\n            // style={{ : \"#169C50\", color: \"white\" }}\r\n          >\r\n            {/* <p\r\n              style={{\r\n                backgroundColor: showRedDot ? \"red\" : \"transparent\",\r\n                width: \"10px\",\r\n                height: \"10px\",\r\n                borderRadius: \"50%\",\r\n              }}\r\n            ></p> */}\r\n            <LuRefreshCcw style={{ cursor: \"pointer\" }} />\r\n          </div>\r\n          <FBinterviewFilter />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className={`${FBstyle.Container}`}>\r\n          <div className={`table-responsive-sm ${FBstyle.responsive}`}>\r\n            <div style={{ minWidth: 300 }}>\r\n              <TableContainer className={`${FBstyle.TableContainer}`}>\r\n                <Table stickyHeader aria-label=\"sticky table\" className={``}>\r\n                  <TableHead className={`${FBstyle.Header}`}>\r\n                    <TableRow>\r\n                      <StyledTableCell>Name</StyledTableCell>\r\n                      <StyledTableCell>Mobile Number</StyledTableCell>\r\n                      <StyledTableCell>Whatsapp Number</StyledTableCell>\r\n                      <StyledTableCell>Job Category</StyledTableCell>\r\n                      <StyledTableCell>Experience</StyledTableCell>\r\n                      <StyledTableCell>Qualification</StyledTableCell>\r\n                      <StyledTableCell>Preferred City</StyledTableCell>\r\n                      {isSuperAdmin && (\r\n                        <StyledTableCell>Assigned To</StyledTableCell>\r\n                      )}\r\n                      <StyledTableCell>Created on</StyledTableCell>\r\n                      <StyledTableCell>Status</StyledTableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {CandidateFBList.length > 0 ? (\r\n                      <>\r\n                        {CandidateFBList.map((candidate, i) => {\r\n                          return (\r\n                            <>\r\n                              <TableRow\r\n                                key={i}\r\n                                sx={{\r\n                                  \"&:last-child td, &:last-child th\": {\r\n                                    border: 0,\r\n                                  },\r\n                                  border: 10,\r\n                                  borderBottomColor: \"black\",\r\n\r\n                                  backgroundColor:\r\n                                    !candidate.facebookMetaLead.seen &&\r\n                                    \"#1cb25f2f\",\r\n                                  // display:\r\n                                  //   FBmetaListFilter.notQualified ||\r\n                                  //   candidate.facebookMetaLead.notQualified ==\r\n                                  //     false\r\n                                  //     ? \"table-row\"\r\n                                  //     : \"none\",\r\n                                }}\r\n                                onClick={() => {\r\n                                  // alert(candidate.facebookMetaLead.id);\r\n\r\n                                  setCurrentMetaDetail(\r\n                                    candidate.facebookMetaLead\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <StyledTableCell\r\n                                  sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                                  title={\r\n                                    candidate.facebookMetaLead.candidateName &&\r\n                                    candidate.facebookMetaLead.candidateName\r\n                                      .length > 15\r\n                                      ? candidate.facebookMetaLead.candidateName\r\n                                      : null\r\n                                  }\r\n                                  onClick={() => {\r\n                                    copyToClipboard(\r\n                                      candidate.facebookMetaLead.candidateName\r\n                                    );\r\n                                    updateSeenStatus(\r\n                                      candidate.facebookMetaLead.id\r\n                                    );\r\n                                    showLeadDetails(\r\n                                      candidate.facebookMetaLead,\r\n                                      true\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  <div>\r\n                                    <div className=\"row\">\r\n                                      {/* <div className=\"col-2\">\r\n                                        {candidate.facebookMetaLead\r\n                                          .isCandidate && (\r\n                                          <img src={Registered} alt=\"R\" />\r\n                                        )}\r\n                                        {candidate.facebookMetaLead\r\n                                          .isCanLead && (\r\n                                          <img src={LeadL} alt=\"L\" />\r\n                                        )}{\" \"}\r\n                                      </div> */}\r\n                                      <div className=\"col-10\">\r\n                                        {candidate.facebookMetaLead\r\n                                          .candidateName != null\r\n                                          ? textTruncate(\r\n                                              capitalizeWords(\r\n                                                candidate.facebookMetaLead\r\n                                                  .candidateName,\r\n                                                15\r\n                                              )\r\n                                            )\r\n                                          : \"-\"}\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  onClick={() => {\r\n                                    const mobileNumber =\r\n                                      candidate.facebookMetaLead.mobileNumber;\r\n                                    if (mobileNumber) {\r\n                                      const last10Digits =\r\n                                        mobileNumber.slice(-10); // Extract the last 10 digits\r\n                                      copyToClipboard(last10Digits);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  {candidate.facebookMetaLead.mobileNumber !=\r\n                                  null\r\n                                    ? String(\r\n                                        candidate.facebookMetaLead.mobileNumber\r\n                                      ).slice(-10)\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  onClick={() => {\r\n                                    const whatsappNumber =\r\n                                      candidate.facebookMetaLead.whatsappNumber;\r\n                                    if (whatsappNumber) {\r\n                                      const last10Digits =\r\n                                        whatsappNumber.slice(-10); // Extract the last 10 digits\r\n                                      copyToClipboard(last10Digits);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  {candidate.facebookMetaLead.whatsappNumber !=\r\n                                  null\r\n                                    ? String(\r\n                                        candidate.facebookMetaLead\r\n                                          .whatsappNumber\r\n                                      ).slice(-10)\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  title={\r\n                                    candidate.facebookMetaLead.jobCategory &&\r\n                                    candidate.facebookMetaLead.jobCategory\r\n                                      .length > 20\r\n                                      ? capitalizeWords(\r\n                                          candidate.facebookMetaLead.jobCategory\r\n                                        )\r\n                                      : null\r\n                                  }\r\n                                  onClick={() => {\r\n                                    copyToClipboard(\r\n                                      candidate.facebookMetaLead.jobCategory\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {candidate.facebookMetaLead.jobCategory !=\r\n                                  null\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          candidate.facebookMetaLead\r\n                                            .jobCategory,\r\n                                          15\r\n                                        )\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {candidate.facebookMetaLead.experience != null\r\n                                    ? formatExperience(\r\n                                        candidate.facebookMetaLead.experience\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  title={\r\n                                    candidate.facebookMetaLead\r\n                                      .educationQualification &&\r\n                                    candidate.facebookMetaLead\r\n                                      .educationQualification.length > 20\r\n                                      ? candidate.facebookMetaLead\r\n                                          .educationQualification\r\n                                      : null\r\n                                  }\r\n                                  onClick={() => {\r\n                                    copyToClipboard(\r\n                                      candidate.facebookMetaLead\r\n                                        .educationQualification\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {candidate.facebookMetaLead\r\n                                    .educationQualification\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          candidate.facebookMetaLead\r\n                                            .educationQualification,\r\n                                          15\r\n                                        )\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n\r\n                                // onClick={() => {\r\n                                //   copyToClipboard(\r\n                                //     candidate.facebookMetaLead.preferredLocation\r\n                                //   );\r\n                                // }}\r\n                                >\r\n                                  {candidate.facebookMetaLead\r\n                                    .preferredLocation != null\r\n                                    ? showCity(\r\n                                        candidate.facebookMetaLead\r\n                                          .preferredLocation\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                {/* <StyledTableCell>\r\n                                  {\" \"}\r\n                                  {candidate.facebookMetaLead.area}\r\n                                </StyledTableCell> */}\r\n                                {isSuperAdmin && (\r\n                                  <StyledTableCell align=\"left\">\r\n                                    <>\r\n                                      {\r\n                                        adminName[\r\n                                          adminid.indexOf(\r\n                                            candidate.facebookMetaLead.assignTo\r\n                                          )\r\n                                        ]\r\n                                      }\r\n                                    </>\r\n                                  </StyledTableCell>\r\n                                )}\r\n                                <StyledTableCell>\r\n                                  <DDMMYYYY_formate\r\n                                    dateValue={\r\n                                      candidate.facebookMetaLead.createdTime\r\n                                    }\r\n                                  />\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  <div className={`${FBstyle.Popper}`}>\r\n                                    <div className={`${FBstyle.StatusStyle}`}>\r\n                                      <div>\r\n                                        <>\r\n                                          {candidate.facebookMetaLead\r\n                                            .notAttend === true &&\r\n                                            candidate.facebookMetaLead\r\n                                              .notQualified === false &&\r\n                                            candidate.facebookMetaLead\r\n                                              .dailyTask === false && (\r\n                                              <>\r\n                                                <div\r\n                                                  className={`${FBstyle.Notattended_wrp}`}\r\n                                                >\r\n                                                  <input\r\n                                                    type=\"radio\"\r\n                                                    checked={\r\n                                                      candidate.facebookMetaLead\r\n                                                        .notAttend\r\n                                                    }\r\n                                                    name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                    id={`notAttend_${candidate.facebookMetaLead.id}`}\r\n                                                  />\r\n                                                  <label\r\n                                                    htmlFor={`notAttend_${candidate.facebookMetaLead.id}`}\r\n                                                  >\r\n                                                    Not Attend\r\n                                                  </label>\r\n                                                </div>\r\n                                              </>\r\n                                            )}\r\n                                          {/* {candidate.facebookMetaLead\r\n                                            .qualified === true && (\r\n                                            <div\r\n                                              className={`${FBstyle.Green_wrp}`}\r\n                                            >\r\n                                              <>\r\n                                                <input\r\n                                                  type=\"radio\"\r\n                                                  name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                  checked={\r\n                                                    candidate.facebookMetaLead\r\n                                                      .qualified\r\n                                                  }\r\n                                                  id={`qualified_${candidate.facebookMetaLead.id}`}\r\n                                                  facebookMetaLead\r\n                                                />\r\n\r\n                                                <label\r\n                                                  htmlFor={`qualified_${candidate.facebookMetaLead.id}`}\r\n                                                >\r\n                                                  Qualified\r\n                                                </label>\r\n                                              </>\r\n                                            </div>\r\n                                          )} */}\r\n                                          {candidate.facebookMetaLead\r\n                                            .notQualified === true && (\r\n                                            <div\r\n                                              className={`${FBstyle.chips_wrp}`}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <input\r\n                                                type=\"radio\"\r\n                                                checked={\r\n                                                  candidate.facebookMetaLead\r\n                                                    .notQualified\r\n                                                }\r\n                                                name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                id={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                              />\r\n                                              <label\r\n                                                htmlFor={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                              >\r\n                                                Not Qualified\r\n                                              </label>\r\n                                            </div>\r\n                                          )}\r\n                                          {candidate.facebookMetaLead\r\n                                            .dailyTask === true &&\r\n                                            candidate.facebookMetaLead\r\n                                              .notQualified === false && (\r\n                                              <div\r\n                                                className={`${FBstyle.Followup_wrp}`}\r\n                                              >\r\n                                                {\" \"}\r\n                                                <input\r\n                                                  type=\"radio\"\r\n                                                  checked={\r\n                                                    candidate.facebookMetaLead\r\n                                                      .dailyTask\r\n                                                  }\r\n                                                  name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                  id={`dailyTask_${candidate.facebookMetaLead.id}`}\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`dailyTask_${candidate.facebookMetaLead.id}`}\r\n                                                >\r\n                                                  Follow Up\r\n                                                </label>\r\n                                              </div>\r\n                                            )}\r\n                                          {/* {candidate.facebookMetaLead\r\n                                            .dailyTask === true && (\r\n                                            <div\r\n                                              className={`${FBstyle.Followup_wrp}`}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <input\r\n                                                type=\"radio\"\r\n                                                checked={\r\n                                                  candidate.facebookMetaLead\r\n                                                    .dailyTask\r\n                                                }\r\n                                                name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                id={`followup_${candidate.facebookMetaLead.id}`}\r\n                                              />\r\n                                              <label\r\n                                                htmlFor={`followup_${candidate.facebookMetaLead.id}`}\r\n                                              >\r\n                                                Follow Up\r\n                                              </label>\r\n                                            </div>\r\n                                          )} */}\r\n                                          {/* {!FBmetaListFilter.notAttend ? (\r\n                                            //  candidate.facebookMetaLead\r\n                                            //     .notQualified === true && (\r\n                                            <div\r\n                                              className={`${FBstyle.chips_wrp}`}\r\n                                            >\r\n                                              {\" \"}\r\n                                              <input\r\n                                                type=\"radio\"\r\n                                                checked={\r\n                                                  candidate.facebookMetaLead\r\n                                                    .notQualified\r\n                                                }\r\n                                                name={`status_${candidate.facebookMetaLead.id}`}\r\n                                                id={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                              />\r\n                                              <label\r\n                                                htmlFor={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                              >\r\n                                                Not Qualified\r\n                                              </label>\r\n                                            </div>\r\n                                          ) : (\r\n                                            // )\r\n                                            \"\"\r\n                                          )} */}\r\n                                        </>\r\n                                      </div>\r\n                                      {(candidate.facebookMetaLead\r\n                                        .isCandidate == null ||\r\n                                        candidate.facebookMetaLead\r\n                                          .isCandidate === false) &&\r\n                                      (candidate.facebookMetaLead.isCanLead ==\r\n                                        null ||\r\n                                        candidate.facebookMetaLead.isCanLead ===\r\n                                          false) ? (\r\n                                        // <>\r\n                                        //   <div>\r\n                                        //     <div className=\"btn-group dropstart\">\r\n                                        //       <button\r\n                                        //         type=\"button\"\r\n                                        //         // className={`btn btn-light `}\r\n\r\n                                        //         data-bs-toggle=\"dropdown\"\r\n                                        //         data-bs-no-caret=\"true\"\r\n                                        //         aria-expanded=\"false\"\r\n                                        //         style={{\r\n                                        //           border: \"none\",\r\n                                        //           background: \"none\",\r\n                                        //           color: \"#000\",\r\n                                        //           cursor: \"pointer\",\r\n                                        //           outline: \"none\",\r\n                                        //           position: \"relative\",\r\n                                        //           right: \"5px\",\r\n                                        //           // backgroundColor: \"red\",\r\n                                        //           fontSize: 20,\r\n                                        //           zIndex: 1,\r\n                                        //         }}\r\n                                        //       >\r\n                                        //         <span className=\"\">\r\n                                        //           {\" \"}\r\n                                        //           <BsThreeDotsVertical />{\" \"}\r\n                                        //         </span>\r\n                                        //         {/* <AiOutlineEdit /> */}\r\n                                        //       </button>\r\n                                        //       <ul\r\n                                        //         className=\"dropdown-menu\"\r\n                                        //         style={{ textAlign: \"left\" }}\r\n                                        //         // ref={dropdownRef}\r\n                                        //       >\r\n                                        //         <li\r\n                                        //           onClick={() => {\r\n                                        //             handleConfirmationOpen(\r\n                                        //               true\r\n                                        //             );\r\n                                        //             handleIsQualified(\r\n                                        //               \"notAttend\"\r\n                                        //             );\r\n                                        //           }}\r\n                                        //         >\r\n                                        //           <a className=\"dropdown-item\">\r\n                                        //             <div\r\n                                        //               className={`${FBstyle.select_wrp}`}\r\n                                        //               onClick={() => {\r\n                                        //                 handleButtonClick(\r\n                                        //                   \"notAttend\"\r\n                                        //                 );\r\n                                        //               }}\r\n                                        //             >\r\n                                        //               <input\r\n                                        //                 type=\"radio\"\r\n                                        //                 // ref={inputRef.qualified}\r\n                                        //                 name={`status_${candidate.facebookMetaLead.id}`}\r\n                                        //                 checked={\r\n                                        //                   candidate\r\n                                        //                     .facebookMetaLead\r\n                                        //                     .notAttend\r\n                                        //                 }\r\n                                        //                 id={`notAttend_${candidate.facebookMetaLead.id}`}\r\n                                        //                 facebookMetaLead\r\n                                        //               />\r\n\r\n                                        //               <label\r\n                                        //                 htmlFor={`notAttend_${candidate.facebookMetaLead.id}`}\r\n                                        //               >\r\n                                        //                 {\" \"}\r\n                                        //                 <GoDotFill\r\n                                        //                   style={{\r\n                                        //                     color: \"#fa9e0a\",\r\n                                        //                     fontSize: 20,\r\n                                        //                   }}\r\n                                        //                 />\r\n                                        //                 Not Attend\r\n                                        //               </label>\r\n                                        //             </div>\r\n                                        //           </a>\r\n                                        //         </li>\r\n                                        //         <li\r\n                                        //           onClick={() => {\r\n                                        //             handleConfirmationOpen(\r\n                                        //               true\r\n                                        //             );\r\n                                        //             handleIsQualified(\r\n                                        //               \"qualified\"\r\n                                        //             );\r\n                                        //           }}\r\n                                        //         >\r\n                                        //           <a\r\n                                        //             className=\"dropdown-item\"\r\n                                        //             href=\"#\"\r\n                                        //           >\r\n                                        //             <div\r\n                                        //               className={`${FBstyle.select_wrp}`}\r\n                                        //               onClick={() => {\r\n                                        //                 handleButtonClick(\r\n                                        //                   \"qualified\"\r\n                                        //                 );\r\n                                        //               }}\r\n                                        //             >\r\n                                        //               <input\r\n                                        //                 type=\"radio\"\r\n                                        //                 // ref={inputRef.qualified}\r\n                                        //                 name={`status_${candidate.facebookMetaLead.id}`}\r\n                                        //                 checked={\r\n                                        //                   candidate\r\n                                        //                     .facebookMetaLead\r\n                                        //                     .qualified\r\n                                        //                 }\r\n                                        //                 id={`qualified_${candidate.facebookMetaLead.id}`}\r\n                                        //                 facebookMetaLead\r\n                                        //               />\r\n\r\n                                        //               <label\r\n                                        //                 htmlFor={`qualified_${candidate.facebookMetaLead.id}`}\r\n                                        //               >\r\n                                        //                 {\" \"}\r\n                                        //                 <GoDotFill\r\n                                        //                   style={{\r\n                                        //                     color: \"#169C50\",\r\n                                        //                     fontSize: 20,\r\n                                        //                   }}\r\n                                        //                 />\r\n                                        //                 Qualify\r\n                                        //               </label>\r\n                                        //             </div>\r\n                                        //           </a>\r\n                                        //         </li>\r\n                                        //         <li\r\n                                        //           onClick={() => {\r\n                                        //             handleConfirmationOpen(\r\n                                        //               true\r\n                                        //             );\r\n                                        //             handleIsQualified(\r\n                                        //               \"notQualified\"\r\n                                        //             );\r\n                                        //           }}\r\n                                        //         >\r\n                                        //           <a\r\n                                        //             className=\"dropdown-item\"\r\n                                        //             href=\"#\"\r\n                                        //             onClick={() =>\r\n                                        //               handleButtonClick(\r\n                                        //                 \"notQualified\"\r\n                                        //               )\r\n                                        //             }\r\n                                        //           >\r\n                                        //             <div\r\n                                        //               className={`${FBstyle.select_wrp}`}\r\n                                        //             >\r\n                                        //               <input\r\n                                        //                 // ref={inputRef.notQualified}\r\n                                        //                 type=\"radio\"\r\n                                        //                 checked={\r\n                                        //                   candidate\r\n                                        //                     .facebookMetaLead\r\n                                        //                     .notQualified\r\n                                        //                 }\r\n                                        //                 name={`status_${candidate.facebookMetaLead.id}`}\r\n                                        //                 id={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                        //                 // onChange={(event) => {\r\n                                        //                 //   handleConfirmationOpen(\r\n                                        //                 //     true\r\n                                        //                 //   );\r\n                                        //                 //   handleIsQualified(\r\n                                        //                 //     \"notQualified\"\r\n                                        //                 //   );\r\n                                        //                 // }}\r\n                                        //                 // onClick={handleCheckboxClick}\r\n                                        //               />\r\n                                        //               <label\r\n                                        //                 htmlFor={`notQualified_${candidate.facebookMetaLead.id}`}\r\n                                        //               >\r\n                                        //                 <GoDotFill\r\n                                        //                   style={{\r\n                                        //                     color: \"#b2261c\",\r\n                                        //                     fontSize: 20,\r\n                                        //                   }}\r\n                                        //                 />{\" \"}\r\n                                        //                 Not Qualified\r\n                                        //               </label>\r\n                                        //             </div>\r\n                                        //           </a>\r\n                                        //         </li>\r\n                                        //         <li\r\n                                        //           onClick={() => {\r\n                                        //             openFollowup(true);\r\n                                        //             handleIsQualified(\r\n                                        //               \"followup\"\r\n                                        //             );\r\n                                        //           }}\r\n                                        //         >\r\n                                        //           <a\r\n                                        //             className=\"dropdown-item\"\r\n                                        //             href=\"#\"\r\n                                        //             onClick={() =>\r\n                                        //               handleButtonClick(\r\n                                        //                 \"followup\"\r\n                                        //               )\r\n                                        //             }\r\n                                        //           >\r\n                                        //             <div\r\n                                        //               className={`${FBstyle.select_wrp}`}\r\n                                        //             >\r\n                                        //               <input\r\n                                        //                 // ref={inputRef.notQualified}\r\n                                        //                 type=\"radio\"\r\n                                        //                 checked={\r\n                                        //                   candidate\r\n                                        //                     .facebookMetaLead\r\n                                        //                     .dailyTask\r\n                                        //                 }\r\n                                        //                 name={`status_${candidate.facebookMetaLead.id}`}\r\n                                        //                 id={`followup_${candidate.facebookMetaLead.id}`}\r\n                                        //                 // onChange={(event) => {\r\n                                        //                 //   handleConfirmationOpen(\r\n                                        //                 //     true\r\n                                        //                 //   );\r\n                                        //                 //   handleIsQualified(\r\n                                        //                 //     \"notQualified\"\r\n                                        //                 //   );\r\n                                        //                 // }}\r\n                                        //                 // onClick={handleCheckboxClick}\r\n                                        //               />\r\n                                        //               <label\r\n                                        //                 htmlFor={`followup_${candidate.facebookMetaLead.id}`}\r\n                                        //               >\r\n                                        //                 <GoDotFill\r\n                                        //                   style={{\r\n                                        //                     color: \"#430CBA\",\r\n                                        //                     fontSize: 20,\r\n                                        //                   }}\r\n                                        //                 />{\" \"}\r\n                                        //                 Follow Up\r\n                                        //               </label>\r\n                                        //             </div>\r\n                                        //           </a>\r\n                                        //         </li>\r\n                                        //         <li>\r\n                                        //           <button\r\n                                        //             className=\"dropdown-item\"\r\n                                        //             onClick={() => {\r\n                                        //               setNotesOpen(true);\r\n                                        //             }}\r\n                                        //           >\r\n                                        //             <label\r\n                                        //               htmlFor=\"\"\r\n                                        //               // className={`${canLeadStyle.Register}`}\r\n                                        //             >\r\n                                        //               <GoDotFill\r\n                                        //                 style={{\r\n                                        //                   color: \"#16617b\",\r\n                                        //                   fontSize: 20,\r\n                                        //                 }}\r\n                                        //               />{\" \"}\r\n                                        //               Add Notes\r\n                                        //             </label>\r\n                                        //           </button>\r\n                                        //         </li>\r\n\r\n                                        //         {/* <li>\r\n                                        //           <button\r\n                                        //             className=\"dropdown-item\"\r\n                                        //             onClick={openFollowup}\r\n                                        //           >\r\n                                        //             <label\r\n                                        //               htmlFor={`followp${candidate.facebookMetaLead.id}`}\r\n                                        //             >\r\n                                        //               <GoDotFill\r\n                                        //                 style={{\r\n                                        //                   color: \"#430CBA\",\r\n                                        //                   fontSize: 20,\r\n                                        //                 }}\r\n                                        //               />{\" \"}\r\n                                        //               Follow Up\r\n                                        //             </label>\r\n                                        //           </button>\r\n                                        //         </li> */}\r\n                                        //         {/* <li>\r\n                                        //       <a\r\n                                        //         className=\"dropdown-item\"\r\n                                        //         href=\"#\"\r\n                                        //       >\r\n                                        //         <div\r\n                                        //           className={`${FBstyle.select_wrp}`}\r\n                                        //         >\r\n                                        //           <span\r\n                                        //             onClick={() => {\r\n\r\n                                        //               showLeadDetails(\r\n                                        //                 candidate.facebookMetaLead,\r\n                                        //                 true\r\n                                        //               );\r\n                                        //             }}\r\n                                        //             className=\"py-1 d-inline-block\"\r\n                                        //           >\r\n                                        //             {\" \"}\r\n                                        //             <MdReadMore /> More Details\r\n                                        //           </span>\r\n                                        //         </div>\r\n                                        //       </a>\r\n                                        //     </li> */}\r\n                                        //       </ul>\r\n                                        //     </div>\r\n                                        //   </div>\r\n                                        // </>\r\n                                        <></>\r\n                                      ) : (\r\n                                        <>\r\n                                          <div className=\"\">\r\n                                            {candidate.facebookMetaLead\r\n                                              .isCandidate && (\r\n                                              <img src={Registered} alt=\"R\" />\r\n                                            )}\r\n                                            {candidate.facebookMetaLead\r\n                                              .isCanLead && (\r\n                                              <img src={LeadL} alt=\"L\" />\r\n                                            )}{\" \"}\r\n                                          </div>\r\n                                        </>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </StyledTableCell>\r\n                              </TableRow>\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </>\r\n                    ) : (\r\n                      <p className=\"text-danger \">Not found</p>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center align-items-center mb-3 position-absolute bottom-0 start-50 translate-middle-x\">\r\n          <Stack spacing={2}>\r\n            <Pagination\r\n              count={pagesCount.totalPages}\r\n              variant=\"outlined\"\r\n              shape=\"rounded\"\r\n              color=\"success\"\r\n              boundaryCount={1}\r\n              siblingCount={0}\r\n              onChange={candidatePagination}\r\n              size=\"medium\"\r\n            />\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      {leadDetails.show && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            // zIndex={2}\r\n            childComponent={\r\n              <>\r\n                <CandidateFBLeadDetailsview\r\n                  onClose={() => {\r\n                    setLeadDetails((prev) => ({ ...prev, show: false }));\r\n                  }}\r\n                  data={leadDetails.data}\r\n                  onAssignChange={() => {\r\n                    ReloadList();\r\n                  }}\r\n                />\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showConfirmationPopup &&\r\n        (putFBLead.qualified ? (\r\n          <>\r\n            <MyModal>\r\n              <ModalContainer\r\n                childComponent={\r\n                  <>\r\n                    <div\r\n                      className={`container d-flex align-itmes-center justify-content-between`}\r\n                    >\r\n                      <div className=\"\">\r\n                        <p>\r\n                          <b>Candidate qualify form</b>\r\n                        </p>\r\n                        <div className=\"d-flex\">\r\n                          {\" \"}\r\n                          <div className={`me-2  ${accordionstyle.radioInput}`}>\r\n                            {/* <label className=\"form-check-label me-3\"> */}\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"fresher\"\r\n                              id=\"fresherYes\"\r\n                              value=\"fresher\"\r\n                              className={`form-check-input `}\r\n                              checked={selectedOption === \"fresher\"}\r\n                              onChange={handleOptionChange}\r\n                            />\r\n                            <label for=\"fresherYes\">Fresher</label>\r\n                            {/* </label> */}\r\n                          </div>\r\n                          <div className={`me-2  ${accordionstyle.radioInput}`}>\r\n                            <label className=\"form-check-label\">\r\n                              <input\r\n                                type=\"radio\"\r\n                                name=\"experience\"\r\n                                id=\"experienceNo\"\r\n                                value=\"experience\"\r\n                                className={`form-check-input `}\r\n                                checked={selectedOption === \"experience\"}\r\n                                onChange={handleOptionChange}\r\n                              />\r\n                              <label for=\"experienceNo\">Experience</label>\r\n                            </label>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ms-5\">\r\n                        <div\r\n                          className=\"btn btn-outline-danger\"\r\n                          onClick={handleCloseQualifyForm}\r\n                        >\r\n                          <AiOutlineClose />{\" \"}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <div>\r\n                        {selectedOption === \"fresher\" ? (\r\n                          <>\r\n                            {/* <div className={`${accordionstyle.Container}`}> */}{\" \"}\r\n                            <QualifyFresherform\r\n                              mobilenumber={currentMetaDetail.mobileNumber.toString()}\r\n                              whatsappNumber={currentMetaDetail.whatsappNumber.toString()}\r\n                              Reloadpage={handleQualifyFormSubmit}\r\n                            />\r\n                            {/* </div> */}\r\n                          </>\r\n                        ) : selectedOption === \"experience\" ? (\r\n                          // <ExperinenceWorkingform\r\n                          //   mobilenumber={currentMetaDetail.mobileNumber}\r\n                          // />\r\n                          <ExperienceForm\r\n                            mobileNumber={currentMetaDetail.mobileNumber}\r\n                            whatsappNumber={currentMetaDetail.whatsappNumber}\r\n                            Reloadpage={handleQualifyFormSubmit}\r\n                          />\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                }\r\n              />\r\n            </MyModal>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <MyModal>\r\n              <ModalContainer\r\n                // zIndex={2}\r\n                childComponent={\r\n                  <div>\r\n                    <div\r\n                      style={\r\n                        {\r\n                          // width: \"400px\",\r\n                        }\r\n                      }\r\n                    >\r\n                      {putFBLead.notQualified ? (\r\n                        <div>\r\n                          <div className=\"text-center mb-2\">\r\n                            Disqualify Candidate\r\n                          </div>\r\n                          <Box\r\n                            sx={{\r\n                              \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                          >\r\n                            <form\r\n                              action=\"\"\r\n                              onSubmit={(e) => {\r\n                                e.preventDefault();\r\n\r\n                                ConfirmFormSubmit(putFBLead.notes);\r\n                              }}\r\n                            >\r\n                              <div>\r\n                                <TextField\r\n                                  id=\"outlined-multiline-flexible\"\r\n                                  label=\"Add Notes\"\r\n                                  multiline\r\n                                  // error={isNotesEmpty}\r\n                                  // helperText={\r\n                                  //   isNotesEmpty ? \"Notes cannot be empty\" : \"\"\r\n                                  // }\r\n                                  required\r\n                                  onChange={(event) => {\r\n                                    setFBputLead((prev) => ({\r\n                                      ...prev,\r\n                                      notes: event.target.value,\r\n                                    }));\r\n                                    // setIsNotesEmpty(false);\r\n                                  }}\r\n                                  maxRows={4}\r\n                                  fullWidth\r\n                                />\r\n                              </div>\r\n\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-1\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Cancel\r\n                                </button>\r\n                                <button\r\n                                  type=\"submit\"\r\n                                  className=\"btn text-white\"\r\n                                  // onClick={ConfirmFormSubmit}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                >\r\n                                  Disqualify\r\n                                </button>\r\n                              </div>\r\n                            </form>\r\n                          </Box>\r\n                        </div>\r\n                      ) : (\r\n                        <div>\r\n                          <div className=\"text-center mb-2\">\r\n                            Not Attend Candidate\r\n                          </div>\r\n                          <Box\r\n                            sx={{\r\n                              \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                          >\r\n                            <form\r\n                              action=\"\"\r\n                              onSubmit={(e) => {\r\n                                e.preventDefault();\r\n\r\n                                ConfirmFormSubmit(putFBLead.notes);\r\n                              }}\r\n                            >\r\n                              <div>\r\n                                <TextField\r\n                                  id=\"outlined-multiline-flexible\"\r\n                                  label=\"Add Notes\"\r\n                                  multiline\r\n                                  // error={isNotesEmpty}\r\n                                  // helperText={\r\n                                  //   isNotesEmpty ? \"Notes cannot be empty\" : \"\"\r\n                                  // }\r\n                                  // required\r\n                                  onChange={(event) => {\r\n                                    setFBputLead((prev) => ({\r\n                                      ...prev,\r\n                                      notes: event.target.value,\r\n                                    }));\r\n                                    // setIsNotesEmpty(false);\r\n                                  }}\r\n                                  maxRows={4}\r\n                                  fullWidth\r\n                                />\r\n                              </div>\r\n\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-1\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Cancel\r\n                                </button>\r\n                                <button\r\n                                  type=\"submit\"\r\n                                  className=\"btn text-white\"\r\n                                  // onClick={() => setopenConfirmation(true)}\r\n                                  // onClick={ConfirmFormSubmit}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </form>\r\n                          </Box>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                }\r\n              />\r\n            </MyModal>\r\n          </>\r\n        ))}\r\n      {OpenConfirmation && (\r\n        <>\r\n          <MyModal>\r\n            <ModalContainer\r\n              childComponent={\r\n                <>\r\n                  <div>\r\n                    <p>Are you sure want to submit ? </p>\r\n                    <div className=\"d-felx justitfy-content-end gap-2\">\r\n                      <div\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => {\r\n                          setopenConfirmation(false);\r\n                        }}\r\n                      >\r\n                        No\r\n                      </div>\r\n                      <div\r\n                        className=\"btn btn-success\"\r\n                        onClick={ConfirmFormSubmit(putFBLead.notes)}\r\n                      >\r\n                        Yes\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              }\r\n            />\r\n          </MyModal>\r\n        </>\r\n      )}\r\n      {notesOpen && (\r\n        <>\r\n          <MyModal>\r\n            <ModalContainer\r\n              childComponent={\r\n                <>\r\n                  <div className=\"d-flex justify-content-end mb-2\">\r\n                    <div\r\n                      className=\"btn btn-outline-danger\"\r\n                      onClick={() => setNotesOpen(false)}\r\n                    >\r\n                      <AiOutlineClose />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"mb-2\">\r\n                    <AddNotesFBLead facebookId={currentMetaDetail.id} />\r\n                  </div>\r\n                </>\r\n              }\r\n            />\r\n          </MyModal>\r\n        </>\r\n      )}\r\n      {ShowTimeline.show && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <TimelineFacebookMeta facebookId={currentMetaDetail.id} />\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {followupopen && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <div\r\n                style={{\r\n                  width: \"350px\",\r\n                  // height: \"800px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <FormControl\r\n                  fullWidth\r\n                  error={followupError.dateTime}\r\n                  style={{ marginBottom: \"16px\" }}\r\n                >\r\n                  {\" \"}\r\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DemoContainer components={[\"DateTimePicker\", \"TextField\"]}>\r\n                      <DateTimePicker\r\n                        label=\"select date and time\"\r\n                        error={Boolean(dateTimeError)}\r\n                        // helperText={dateTi/meError}\r\n                        // value={dateTime}\r\n                        onChange={(date) => {\r\n                          setDateTime(date);\r\n                          setFollowupError((prev) => ({\r\n                            ...prev,\r\n                            dateTime: false,\r\n                          }));\r\n                          const formattedDate =\r\n                            dayjs(date).format(\"YYYY-MM-DD hh:mm A\");\r\n                          setFormattedDate(formattedDate);\r\n                        }}\r\n                      />\r\n                      {/* {followupError.dateTime && (\r\n                        <FormHelperText error>\r\n                          Please select a date and time\r\n                        </FormHelperText>\r\n                      )} */}\r\n                      {followupError.dateTime && (\r\n                        <span style={{ color: \"#d44349\" }}>\r\n                          Please select a date and time\r\n                        </span>\r\n                      )}\r\n                    </DemoContainer>\r\n                  </LocalizationProvider>\r\n                </FormControl>\r\n                <TextField\r\n                  style={{ marginBottom: \"16px\" }}\r\n                  id=\"outlined-multiline-flexible\"\r\n                  label=\"Add Notes\"\r\n                  multiline\r\n                  onChange={(event) => {\r\n                    setFollownotes(event.target.value);\r\n                    setFollowupError((prev) => ({\r\n                      ...prev,\r\n                      addNotes: false,\r\n                    }));\r\n                  }}\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  error={followupError.addNotes}\r\n                  // helperText={\r\n                  //   followupError.addNotes ? \"Notes cannot be empty\" : \"\"\r\n                  // }\r\n                />\r\n                {followupError.addNotes && (\r\n                  <span style={{ color: \"#d44349\" }}>\r\n                    Notes cannot be empty\r\n                  </span>\r\n                )}\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    style={{\r\n                      color: \"red\",\r\n                      borderColor: \"red\",\r\n                      marginRight: \"8px\",\r\n                    }}\r\n                    onClick={closeFollowup}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    style={{ color: \"green\", borderColor: \"green\" }}\r\n                    onClick={handleFollowSubmit}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n              </div>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n      <>\r\n        <Backdrop\r\n          sx={{\r\n            color: \"#fff\",\r\n            zIndex: (theme) => theme.zIndex.drawer + 1,\r\n          }}\r\n          open={showLoader}\r\n          onClick={() => {}} // Prevent closing on backdrop click\r\n        >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n      </>\r\n      {showSuccess && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex=\"5000\"\r\n            childComponent={<SuccessTick HeadText=\"Successfully Updated\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showAlreadyRegister && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex=\"5000\"\r\n            childComponent={\r\n              <>\r\n                <div>\r\n                  <p>\r\n                    <b>{currentMetaDetail.candidateName}</b> is already\r\n                    registered\r\n                  </p>\r\n                </div>\r\n                <div className=\"d-flex justify-content-end\">\r\n                  <div\r\n                    className=\"btn btn-danger px-3\"\r\n                    onClick={() => setshowAlreadyRegister(false)}\r\n                  >\r\n                    Ok\r\n                  </div>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showSuccessForm && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex=\"5000\"\r\n            childComponent={<SuccessTick HeadText=\"Successfully Submit\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CandidateFaceBookMetaTable;\r\n"],"names":["FBmetaListFilter","useSelector","state","FbmetaLeadDetails","FBmetaListFilterRedDot","refreshRedDot","size","create","createdTime","ended","endDate","filterDetails","isSuperAdmin","adminDetails","roleID","adminList","setAdminList","useState","initialState","adminId","localStorage","getItem","candidateName","mobileNumber","educationQualification","preferredLocation","jobCategory","experience","whatsappNumber","joiningAvailability","notAttend","notQualified","noStatus","followUp","formData","setFormData","options","setOptions","dateRange","setDateRange","start","end","dateFilterType","showFilter","setShowFilter","showCustom","setshowCustom","showRedDot","setShowRedDot","validationErrors","setValidationErrors","selectStatus","setSelectStatus","anchorEl","setAnchorEl","React","open","Boolean","handleDateSelect","useRef","val","selectedOption","today","Date","startDate","setDate","getDate","prev","toISOString","split","setMonth","getMonth","handleCustomDate","value","type","target","handleFieldChange","field","numbersOnlyTest","useEffect","GetAllsdminDetails","then","data","activeAdmins","filter","item","Deactived","catch","alert","Dispatch","useDispatch","handleSubmit","e","preventDefault","FBmetaLeadsSliceActions","setFBmetaListFilter","pages","isFilterApplied","setFBmetaListFilterRedDot","console","log","getJobFilterOptions","el","category","element","_","index","updateJobCategory","event","updateQualification","_jsxs","children","_jsx","className","concat","FBStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","zIndex","childComponent","_Fragment","cursor","fontSize","AiOutlineClose","BoxContainerWidth","onSubmit","Stack","TextField","id","label","fullWidth","onChange","inputProps","maxLength","InputProps","startAdornment","display","alignItems","AiOutlinePhone","marginRight","FormControl","undefined","currentTarget","Menu","onClose","MenuListProps","MenuItem","minWidth","htmlFor","name","min","max","isFormValid","isValid","Autocomplete","map","option","getOptionLabel","reason","filterSelectedOptions","renderInput","params","placeholder","select","onKeyPress","key","InputLabel","Select","defaultValue","handleAssignToChange","userName","handleClear","search","sx","StyledTableCell","styled","TableCell","tableCellClasses","head","color","padding","body","borderBottom","CandidateFBList","setCandidateFBList","setSelectedOption","openform","setopenform","pagesCount","setPagesCount","totalPages","totalCount","currentPage","followupError","setFollowupError","dateTime","addNotes","selectEvent","currentMetaDetail","setCurrentMetaDetail","showConfirmationPopup","setShowConfirmPopup","eventData","setEventData","notesOpen","setNotesOpen","followupopen","setFollowupOpen","formattedDate","setFormattedDate","setDateTime","Follownotes","setFollownotes","dateTimeError","setDateTimeError","notesError","setNotesError","setTotalCount","showLoader","setShowLoader","openCreateReport","setOpenCreateReport","showSuccess","setShowSuccess","showSuccessForm","setshowSuccessForm","isFresher","setIsFresher","showInitialRadios","setShowInitialRadios","showCurrentlyWorkingComponent","setShowCurrentlyWorkingComponent","showNotWorkingComponent","setShowNotWorkingComponent","selectedValue","setSelectedValue","showAlreadyRegister","setshowAlreadyRegister","unseenCountDetails","candidate","OpenConfirmation","setopenConfirmation","assignAdminto","setAssignAdminto","metaLeadId","putFBLead","setFBputLead","qualified","notes","isChecked","setIsChecked","leadDetails","setLeadDetails","show","date","ShowTimeline","showHideDetails","candidateLead","leadTimeLine","adminName","setAdminName","adminid","setAdminId","handleCloseNotes","adminNames","adminIds","setFBmetaListFilterAdminId","closeFollowup","PostCandidateFBmeta","metaLeadsList","Math","ceil","ReloadList","capitalizeWords","str","replace","char","toUpperCase","copyToClipboard","text","textField","document","createElement","innerText","appendChild","execCommand","removeChild","ConfirmFormSubmit","PutFBmetaIsQualified","err","finally","async","GetFollowUpEvents","error","fetchEventData","handleOptionChange","experiencedValue","PutCandidateType","message","handleCloseQualifyForm","selectCandidateStatus","setselectCandidateStatus","handleQualifyFormSubmit","setTimeout","FBstyle","FilterHead","setFBmetaListFilterSize","candidateSize","selected","canLeadStyle","filterAdduser","handleReset","LuRefreshCcw","FBinterviewFilter","Container","responsive","TableContainer","Table","stickyHeader","TableHead","Header","TableRow","TableBody","length","i","border","borderBottomColor","facebookMetaLead","seen","title","updateMetaSeenStatus","textTruncate","slice","String","toLowerCase","align","indexOf","assignTo","DDMMYYYY_formate","dateValue","Popper","StatusStyle","dailyTask","Notattended_wrp","checked","chips_wrp","Followup_wrp","isCandidate","isCanLead","src","alt","spacing","Pagination","count","shape","boundaryCount","siblingCount","page","setFBmetaListFilterPage","CandidateFBLeadDetailsview","onAssignChange","accordionstyle","radioInput","for","QualifyFresherform","mobilenumber","toString","Reloadpage","ExperienceForm","Box","m","autoComplete","action","multiline","required","maxRows","AddNotesFBLead","facebookId","TimelineFacebookMeta","position","marginBottom","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DateTimePicker","dayjs","format","justifyContent","Button","borderColor","trim","formattedDateTime","followUpTime","PostFollowup","Backdrop","theme","drawer","CircularProgress","SuccessTick","HeadText"],"sourceRoot":""}