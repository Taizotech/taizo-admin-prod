{"version":3,"file":"static/js/501.202280f1.chunk.js","mappings":"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","sources":["pages/Candidate/Candidate interview schedule list/interviewFilter.js","pages/Candidate/CandidateInterview/interviewReschedule..js","pages/Candidate/Candidate interview schedule list/CandidateInterviewTable.js"],"sourcesContent":["/* eslint-disable no-duplicate-case */\r\n/* eslint-disable no-fallthrough */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Stack,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Autocomplete,\r\n  Menu,\r\n} from \"@mui/material\";\r\n\r\nimport \"dayjs/locale/en-gb\";\r\n\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { MyModal, dateFormate, numbersOnlyTest } from \"../../../utility\";\r\nimport { GetAllsdminDetails, getJobFilterOptions } from \"../../../apiServices\";\r\nimport { interviewListActions } from \"../../../redux-store/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import styled from \"styled-components\";\r\nimport { AiOutlineClose, AiOutlinePhone } from \"react-icons/ai\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport interviewStyle from \"./candidateInterviewSchedule.module.scss\";\r\n\r\n// const RedDot = styled.span`\r\n//   display: inline-block;\r\n//   width: 10px;\r\n//   height: 10px;\r\n//   background-color: red;\r\n//   border-radius: 50%; /* Makes it a circle */\r\n// `;\r\n\r\nexport default function ScheduleInterviewFilter() {\r\n  const interviewFilter = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const interviewFilterRedDot = useSelector(\r\n    (state) => state.interviewListDetails.refreshRedDot\r\n  );\r\n  const adminDetailsRole = useSelector((state) => state.adminDetails);\r\n  let isSuperAdmin = adminDetailsRole.roleID == 1;\r\n  const adminIDTwo = localStorage.getItem(\"adminID\") === \"2\";\r\n  const initialValues = {\r\n    adminId: localStorage.getItem(\"adminID\"),\r\n    jobId: interviewFilter.jobId,\r\n    contactNumber: interviewFilter.contactNumber,\r\n    candidateMobileNumber: interviewFilter.candidateMobileNumber,\r\n    companyName: interviewFilter.companyName,\r\n    jobCategory: interviewFilter.jobCategory,\r\n    city: interviewFilter.city,\r\n    area: interviewFilter.area,\r\n    interviewStatus: interviewFilter.interviewStatus,\r\n    scheduledBy: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n  };\r\n\r\n  const filterDetails = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const create = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.createdTime\r\n  );\r\n  const ended = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.endDate\r\n  );\r\n  const interviewStart = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.interviewDate\r\n  );\r\n  const interviewEnd = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.interviewEndDate\r\n  );\r\n\r\n  const [formData, setFormData] = useState(initialValues);\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [dateRange, setDateRange] = useState({\r\n    start: filterDetails.createdTime,\r\n    end: filterDetails.endDate,\r\n    dateFilterType: filterDetails.dateFilterType,\r\n  });\r\n  const [dateRange1, setDateRange1] = useState({\r\n    start: filterDetails.interviewDate,\r\n    end: filterDetails.interviewEndDate,\r\n    interviewdateFilterType: filterDetails.interviewdateFilterType,\r\n  });\r\n  const [showCustom, setshowCustom] = useState(false);\r\n  const [showCustom1, setshowCustom1] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n\r\n  const [adminDetails, setAdminDetails] = useState({\r\n    id: null,\r\n    adminName: [],\r\n  });\r\n  const handleTextFieldClick = () => {\r\n    setshowCustom1(true);\r\n  };\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n\r\n  const Dispatch = useDispatch();\r\n\r\n  const [errors, setErrors] = useState({\r\n    jobId: \"\",\r\n    candidateMobileNumber: \"\",\r\n    contactNumber: \"\",\r\n    companyName: \"\",\r\n    interviewDate: \"\",\r\n    jobCategory: \"\",\r\n    city: [],\r\n    area: [],\r\n    interviewStatus: \"\",\r\n    scheduledBy: \"\",\r\n  });\r\n\r\n  const [options, setOptions] = useState({\r\n    area: [],\r\n    city: [],\r\n    jobCategory: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  const jobCategory = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.jobCategory\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.size\r\n  );\r\n  const page = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.page\r\n  );\r\n\r\n  const [adminList, setAdminList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      const cityOptions = data.filter((element) => element.category === \"city\");\r\n      const areaOptions = data.filter(\r\n        (element) => element.category === \"areas\"\r\n      );\r\n      const JobCategoryOptions = data.filter(\r\n        (element) => element.category == \"job category\"\r\n      );\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        city: cityOptions,\r\n        area: areaOptions,\r\n        jobCategory: JobCategoryOptions,\r\n      }));\r\n      console.log(cityOptions);\r\n    });\r\n\r\n    GetAllsdminDetails()\r\n      .then((data) => {\r\n        const activeAdmins = data.filter((item) => !item.Deactived);\r\n        setAdminList(activeAdmins);\r\n      })\r\n      .catch(() => {\r\n        alert(\"Something Went wrong\");\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminName = data.map((item) => item.userName);\r\n      const adminid = data.map((item) => item.id);\r\n      console.log(adminName);\r\n      console.log(adminid);\r\n      setAdminDetails((prev) => ({\r\n        ...prev,\r\n        adminName: adminName,\r\n        id: adminid,\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  function handleAssignToChange(e) {\r\n    const { value } = e.target;\r\n    setFormData((prev) => ({ ...prev, scheduledBy: value }));\r\n  }\r\n\r\n  function handleFieldChange(field, value) {\r\n    // const value = event.target.value;\r\n    console.log(value, \"Interview time\");\r\n    console.log(numbersOnlyTest(value));\r\n    // eslint-disable-next-line default-case\r\n    switch (field) {\r\n      case \"jobId\":\r\n        if (numbersOnlyTest(value)) {\r\n          // setFormData((prev) => ({ ...prev, [field]: value }));\r\n          setFormData({ ...formData, [field]: value });\r\n\r\n          setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        } else {\r\n          setErrors((prev) => ({\r\n            ...prev,\r\n            jobId: \"Please enter valid job Id\",\r\n          }));\r\n        }\r\n        break;\r\n      case \"companyName\":\r\n        // setFormData((prev) => ({ ...prev, [field]: value }));\r\n\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n        break;\r\n      // case \"jobCategory\":\r\n      //   // setFormData((prev) => ({ ...prev, [field]: value }));\r\n      //   setFormData({ ...formData, [field]: value });\r\n      //   setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n      //   break;\r\n      case \"interviewStatus\":\r\n        // setFormData((prev) => ({ ...prev, [field]: value }));\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n        break;\r\n      case \"contactNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          if (value.length <= 10) {\r\n            // setFormData((prev) => ({ ...prev, [field]: value }));\r\n            setFormData({ ...formData, [field]: value });\r\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n          } else {\r\n            setErrors((prev) => ({\r\n              ...prev,\r\n              contactNumber: \"Contact number must be exactly 10 digits long\",\r\n            }));\r\n          }\r\n        }\r\n      case \"candidateMobileNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          if (value.length <= 10) {\r\n            // setFormData((prev) => ({ ...prev, [field]: value }));\r\n            setFormData({ ...formData, [field]: value });\r\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n          } else {\r\n            setErrors((prev) => ({\r\n              ...prev,\r\n              candidateMobileNumber:\r\n                \"candidate MobileNumber number must be exactly 10 digits long\",\r\n            }));\r\n          }\r\n        } else {\r\n          setErrors((prev) => ({\r\n            ...prev,\r\n            contactNumber: \"Please enter a valid number\",\r\n          }));\r\n        }\r\n        break;\r\n      case \"interviewStatus\":\r\n        // setFormData((prev) => ({\r\n        //   ...prev,\r\n        //   [field]: dateFormate(value.$d).trim(),\r\n        // }));\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        break;\r\n\r\n      case \"interviewDate\":\r\n        if (!value) {\r\n          setErrors((prev) => ({ ...prev, [field]: \"Date is required\" }));\r\n        } else {\r\n          setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        }\r\n\r\n        setFormData({ ...formData, [field]: dateFormate(value.$d).trim() });\r\n        break;\r\n    }\r\n  }\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [interviewadatanchor, setInterviewadatanchor] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const interviewDateOpen = Boolean(interviewadatanchor);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleInterviewdateClick = (event) => {\r\n    setInterviewadatanchor(event.currentTarget);\r\n  };\r\n  const handleClose = (val) => {\r\n    console.log(val);\r\n\r\n    setAnchorEl(null);\r\n  };\r\n  const handleClose1 = (val) => {\r\n    console.log(val);\r\n\r\n    setInterviewadatanchor(null);\r\n  };\r\n\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date(today);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 6) % 7;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 7);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 6);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setAnchorEl(null);\r\n      console.log(startDate, endDate);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 13) % 14;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 14);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 13);\r\n      console.log(startDate, endDate);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const today = new Date(); // Assuming today is the current date\r\n\r\n      const startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n\r\n      const endDate = new Date(today.getFullYear(), today.getMonth(), 0);\r\n\r\n      console.log(startDate, endDate);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"yesterday\") {\r\n      const today = new Date(); // Assuming today is the current date\r\n\r\n      // Calculate yesterday's date\r\n      const yesterday = new Date(today);\r\n      yesterday.setDate(today.getDate() - 1);\r\n\r\n      // Set the start time to 12:00 AM\r\n      const startDate = new Date(yesterday);\r\n      startDate.setHours(0, 0, 0, 0);\r\n\r\n      // Set the end time to 11:59 PM\r\n      const endDate = new Date(yesterday);\r\n      endDate.setHours(23, 59, 59, 999);\r\n\r\n      console.log(\r\n        startDate.toISOString().split(\"T\")[0],\r\n        endDate.toISOString().split(\"T\")[0],\r\n        \"Dateeeeeeeeeeeeee\"\r\n      );\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Yesterday\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n  const handleInterviewDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date(today);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 6) % 7;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 7);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 6);\r\n\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setInterviewadatanchor(null);\r\n      console.log(startDate, endDate);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 13) % 14;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 14);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 13);\r\n      console.log(startDate, endDate);\r\n\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setInterviewadatanchor(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setInterviewadatanchor(null);\r\n    } else if (selectedOption === \"tomorrow\") {\r\n      // Calculate tomorrow's date\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(today.getDate() + 1);\r\n\r\n      // Set the start time to 12:00 AM\r\n      const startDate = new Date(tomorrow);\r\n      // startDate.setHours(0, 0, 0, 0);\r\n\r\n      // Set the end time to 11:59 PM\r\n      const endDate = new Date(tomorrow);\r\n      endDate.setHours(23, 59, 59, 999);\r\n\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Tomorrow\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setInterviewadatanchor(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const today = new Date(); // Assuming today is the current date\r\n\r\n      const startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n\r\n      const endDate = new Date(today.getFullYear(), today.getMonth(), 0);\r\n\r\n      console.log(startDate, endDate);\r\n\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setInterviewadatanchor(null);\r\n    } else if (selectedOption === \"yesterday\") {\r\n      const today = new Date();\r\n\r\n      // Calculate yesterday's date\r\n      const yesterday = new Date(today);\r\n      yesterday.setDate(today.getDate() - 1);\r\n\r\n      // Set the start time to 12:00 AM\r\n      const startDate = new Date(yesterday);\r\n      // startDate.setHours(0, 0, 0, 0);\r\n\r\n      // Set the end time to 11:59 PM\r\n      const endDate = new Date(yesterday);\r\n      endDate.setHours(23, 59, 59, 999);\r\n\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        interviewdateFilterType: \"Yesterday\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setInterviewadatanchor(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom1(true);\r\n      setInterviewadatanchor(null);\r\n    }\r\n  };\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  function handleInterviewCustomDate(value, type) {\r\n    // setSelectedDates({\r\n    //   ...selectedDates,\r\n    //   [type]: value.target.value,\r\n    // });\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        interviewdateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        interviewdateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid =\r\n      (dateRange.start && dateRange.end) ||\r\n      (dateRange1.start && dateRange1.end);\r\n\r\n    if (!dateRange.start || !dateRange1.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end || !dateRange1.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleApply = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n      console.log(\"Form submitted:\", dateRange);\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n      setshowCustom1(false);\r\n    }\r\n  };\r\n\r\n  const updateArea = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, area: event });\r\n    // setFormData({ ...formData, city: value.options });\r\n  };\r\n  const updateCity = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, city: event.options });\r\n    // setFormData({ ...formData, city: value.options });\r\n  };\r\n\r\n  const updateJobCategory = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, jobCategory: event.options });\r\n  };\r\n  const updateJScheduleby = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, scheduledBy: event });\r\n  };\r\n\r\n  const InterviewStatus = [\r\n    {\r\n      value: \"0\",\r\n      label: \"None\",\r\n    },\r\n    {\r\n      value: \"1\",\r\n      label: \"Attending\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"Not Attended\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      label: \"Awaiting\",\r\n    },\r\n\r\n    {\r\n      value: \"3\",\r\n      label: \"Selected\",\r\n    },\r\n\r\n    {\r\n      value: \"4\",\r\n      label: \"Not Selected\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      label: \"Will Join\",\r\n    },\r\n    {\r\n      value: \"5\",\r\n      label: \"Offer Rejected\",\r\n    },\r\n    // {\r\n    //   value: \"6\",\r\n    //   label: \"Joined\",\r\n    // },\r\n\r\n    // {\r\n    //   value: \"8\",\r\n    //   label: \"Left Company\",\r\n    // },\r\n    ...(isSuperAdmin || adminIDTwo\r\n      ? [\r\n          {\r\n            value: \"7\",\r\n            label: \"Rescheduled\",\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...formData,\r\n        page: 1,\r\n        size: size,\r\n        createdTime: dateRange.start || create,\r\n        endDate: dateRange.end || ended,\r\n        interviewDate: dateRange1.start || interviewStart,\r\n        interviewEndDate: dateRange1.end || interviewEnd,\r\n        dateFilterType: dateRange.dateFilterType || \"\",\r\n        interviewdateFilterType: dateRange1.interviewdateFilterType || \"\",\r\n      })\r\n    );\r\n\r\n    // Check if any filter is applied\r\n    const isFilterApplied =\r\n      interviewFilter.jobId ||\r\n      interviewFilter.interviewDate ||\r\n      interviewFilter.companyName ||\r\n      interviewFilter.contactNumber ||\r\n      interviewFilter.candidateMobileNumber ||\r\n      interviewFilter.jobCategory ||\r\n      interviewFilter.city ||\r\n      interviewFilter.area ||\r\n      interviewFilter.interviewStatus;\r\n\r\n    Dispatch(interviewListActions.setInterviewFilterRedDot(isFilterApplied));\r\n\r\n    setShowFilter(false);\r\n    // console.log(showFilter, \"jhjhsjhdfh\");\r\n  };\r\n\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n\r\n    setFormData({\r\n      adminId: localStorage.getItem(\"adminID\"),\r\n      jobId: \"\",\r\n      jobCategory: \"\",\r\n      companyName: \"\",\r\n      candidateMobileNumber: \"\",\r\n      interviewStatus: -1,\r\n      scheduledBy: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n      city: \"\",\r\n      area: \"\",\r\n    });\r\n    setDateRange1({\r\n      start: \"\",\r\n      end: \"\",\r\n      interviewdateFilterType: \"\",\r\n    });\r\n    setDateRange({\r\n      start: null,\r\n      end: null,\r\n      dateFilterType: \"\",\r\n    });\r\n\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...initialValues,\r\n        createdTime: \"\",\r\n        endDate: \"\",\r\n        interviewDate: \"\",\r\n        interviewEndDate: \"\",\r\n        page: 1,\r\n        size: size,\r\n        dateFilterType: \"\",\r\n        interviewdateFilterType: \"\",\r\n      })\r\n    );\r\n    Dispatch(interviewListActions.setInterviewFilterRedDot(false));\r\n  }\r\n\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...formData,\r\n        page: 1,\r\n        size: size,\r\n        createdTime: create,\r\n        endDate: ended,\r\n        interviewDate: interviewStart,\r\n        interviewEndDate: interviewEnd,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n    // setShowRedDot(false);\r\n    setShowFilter(false);\r\n  }\r\n  const jobCategoryStrings = options.jobCategory.map(\r\n    (option) => option.options\r\n  );\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${interviewStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />{\" \"}\r\n          <p\r\n            style={{\r\n              backgroundColor: interviewFilterRedDot ? \"red\" : \"transparent\",\r\n              width: \"10px\",\r\n              height: \"10px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>{\" \"}\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <div className={`${interviewStyle.BoxContainerWidth}`}>\r\n                <>\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <h4 className=\"text-center mb-2\">Filter by admin</h4>\r\n                    <h3>\r\n                      <span\r\n                        onClick={handleClickCross}\r\n                        className=\"btn btn-outline-danger\"\r\n                        style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                      >\r\n                        <AiOutlineClose />\r\n                      </span>\r\n                    </h3>\r\n                  </div>\r\n\r\n                  <form\r\n                    onSubmit={(e) => {\r\n                      handleSubmit(e);\r\n                    }}\r\n                  >\r\n                    <Stack className=\"mt-1\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Mobile number\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={formData.candidateMobileNumber}\r\n                            // inputProps={{ maxLenth: 10 }}\r\n                            onChange={(event) =>\r\n                              // event.target.value.length <= 10 &&\r\n                              handleFieldChange(\r\n                                \"candidateMobileNumber\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <span\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <AiOutlinePhone\r\n                                    style={{ marginRight: \"5px\" }}\r\n                                  />{\" \"}\r\n                                  +91\r\n                                </span>\r\n                              ),\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          {/* <FormControl fullWidth>\r\n                            <TextField\r\n                              id=\"outlined-basic\"\r\n                              label=\"Interview Date\"\r\n                              variant=\"outlined\"\r\n                              value={`${dateRange.dateFilterType}`}\r\n                              // value={`${dateRange1.start} - ${dateRange1.end}`}\r\n                              onClick={handleTextFieldClick}\r\n                            /> */}\r\n                          <FormControl variant=\"outlined\" fullWidth>\r\n                            <TextField\r\n                              label=\"Interview Date\"\r\n                              id=\"basic-button\"\r\n                              value={`${dateRange1.interviewdateFilterType}`}\r\n                              // value={`${dateRange1.start} - ${dateRange1.end}`}\r\n                              aria-controls={open ? \"basic-menu\" : undefined}\r\n                              aria-haspopup=\"true\"\r\n                              aria-expanded={open ? \"true\" : undefined}\r\n                              onClick={handleInterviewdateClick}\r\n                            ></TextField>\r\n                            <Menu\r\n                              id=\"basic-menu\"\r\n                              anchorEl={interviewadatanchor}\r\n                              open={interviewDateOpen}\r\n                              onClose={handleClose1}\r\n                              MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                              }}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"today\");\r\n                                }}\r\n                                style={{ width: \"210px\" }}\r\n                              >\r\n                                Today\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"tomorrow\");\r\n                                }}\r\n                                style={{ width: \"210px\" }}\r\n                              >\r\n                                Tomorrow\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"yesterday\");\r\n                                }}\r\n                              >\r\n                                Yesterday\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"lastWeek\");\r\n                                }}\r\n                              >\r\n                                Last 1 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"lastTwoWeeks\");\r\n                                }}\r\n                              >\r\n                                Last 2 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"lastMonth\");\r\n                                }}\r\n                              >\r\n                                Last Month\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleInterviewDateSelect(\"custom\");\r\n                                }}\r\n                              >\r\n                                Custom Date\r\n                              </MenuItem>\r\n                            </Menu>\r\n                          </FormControl>\r\n                          {showCustom1 && (\r\n                            <MyModal>\r\n                              <ModalContainer\r\n                                zIndex={1005}\r\n                                childComponent={\r\n                                  <div\r\n                                    style={{\r\n                                      minWidth: \"400px\",\r\n                                      width: \"auto\",\r\n                                    }}\r\n                                  >\r\n                                    <>\r\n                                      <div>\r\n                                        <form>\r\n                                          <p className=\"text-center \">\r\n                                            Select Custom Date{\" \"}\r\n                                          </p>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"start\">From</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.start\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"start\"\r\n                                              value={dateRange1.start}\r\n                                              onChange={(value) =>\r\n                                                handleInterviewCustomDate(\r\n                                                  value,\r\n                                                  \"startDate\"\r\n                                                )\r\n                                              }\r\n                                              // Value={\r\n                                              //   new Date()\r\n                                              //     .toISOString()\r\n                                              //     .split(\"T\")[0]\r\n                                              // }\r\n                                              name=\"trip-start\"\r\n                                              // min=\"2020-01-01\"\r\n                                              // max={\r\n                                              //   new Date()\r\n                                              //     .toISOString()\r\n                                              //     .split(\"T\")[0]\r\n                                              // }\r\n                                            />\r\n                                            {validationErrors.start && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                Start date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"end\">To</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.end\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"end\"\r\n                                              value={dateRange1.end}\r\n                                              // new Date().toISOString().split(\"T\")[0]\r\n                                              onChange={(value) =>\r\n                                                handleInterviewCustomDate(\r\n                                                  value,\r\n                                                  \"endDate\"\r\n                                                )\r\n                                              }\r\n                                              // Value={\r\n                                              //   new Date()\r\n                                              //     .toISOString()\r\n                                              //     .split(\"T\")[0]\r\n                                              // }\r\n                                              name=\"trip-end\"\r\n                                              // min=\"2020-01-01\"\r\n                                              // max={\r\n                                              //   new Date()\r\n                                              //     .toISOString()\r\n                                              //     .split(\"T\")[0]\r\n                                              // }\r\n                                            />\r\n                                            {validationErrors.end && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                End date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"d-flex justify-content-end mt-3 \">\r\n                                            <button\r\n                                              onClick={() => {\r\n                                                setValidationErrors({\r\n                                                  start: false,\r\n                                                  end: false,\r\n                                                });\r\n                                                setshowCustom1(false);\r\n                                              }}\r\n                                              style={{\r\n                                                backgroundColor: \"#b2261c\",\r\n                                              }}\r\n                                              className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                            >\r\n                                              Close\r\n                                            </button>\r\n                                            <button\r\n                                              onClick={handleApply}\r\n                                              // color=\"primary\"\r\n                                              className=\"btn rounded-pill text-white px-4\"\r\n                                              style={{\r\n                                                backgroundColor: \"#169C50\",\r\n                                              }}\r\n                                            >\r\n                                              Apply\r\n                                            </button>\r\n                                          </div>\r\n                                        </form>\r\n                                      </div>\r\n                                    </>\r\n                                  </div>\r\n                                }\r\n                              />\r\n                            </MyModal>\r\n                          )}\r\n                          {/* </FormControl>{\" \"} */}\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.jobCategory.map(\r\n                              (option) => option\r\n                            )}\r\n                            fullWidth\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateJobCategory(value);\r\n                            //   console.log(value, \"value jobs\");\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateJobCategory(\"\");\r\n                              } else {\r\n                                updateJobCategory(value);\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.jobCategory\r\n                                ? formData.jobCategory\r\n                                : \"\",\r\n                              category: \"job category\",\r\n                            }}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Job category\"\r\n                                placeholder=\"Job category\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        {/* created on */}\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <FormControl variant=\"outlined\" fullWidth>\r\n                            <TextField\r\n                              label=\"Created on\"\r\n                              id=\"basic-button\"\r\n                              value={`${dateRange.dateFilterType}`}\r\n                              // value={`${dateRange.start} - ${dateRange.end}`}\r\n                              aria-controls={open ? \"basic-menu\" : undefined}\r\n                              aria-haspopup=\"true\"\r\n                              aria-expanded={open ? \"true\" : undefined}\r\n                              onClick={handleClick}\r\n                            ></TextField>\r\n                            <Menu\r\n                              id=\"basic-menu\"\r\n                              anchorEl={anchorEl}\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                              }}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"today\");\r\n                                }}\r\n                                style={{ width: \"210px\" }}\r\n                              >\r\n                                Today\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"yesterday\");\r\n                                }}\r\n                              >\r\n                                Yesterday\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastWeek\");\r\n                                }}\r\n                              >\r\n                                Last 1 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastTwoWeeks\");\r\n                                }}\r\n                              >\r\n                                Last 2 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastMonth\");\r\n                                }}\r\n                              >\r\n                                Last Month\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"custom\");\r\n                                }}\r\n                              >\r\n                                Custom Date\r\n                              </MenuItem>\r\n                            </Menu>\r\n                          </FormControl>\r\n                          {/*  */}\r\n                          {showCustom && (\r\n                            <MyModal>\r\n                              <ModalContainer\r\n                                zIndex={1005}\r\n                                childComponent={\r\n                                  <div\r\n                                    style={{\r\n                                      minWidth: \"400px\",\r\n                                      width: \"auto\",\r\n                                    }}\r\n                                  >\r\n                                    <>\r\n                                      <div>\r\n                                        <form>\r\n                                          <p className=\"text-center \">\r\n                                            Select Custom Date{\" \"}\r\n                                          </p>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"start\">From</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.start\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"start\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"startDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-start\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.start && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                Start date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"end\">To</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.end\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"end\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"endDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-end\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.end && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                End date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"d-flex justify-content-end mt-3 \">\r\n                                            <button\r\n                                              onClick={() => {\r\n                                                setValidationErrors({\r\n                                                  start: false,\r\n                                                  end: false,\r\n                                                });\r\n                                                setshowCustom(false);\r\n                                              }}\r\n                                              style={{\r\n                                                backgroundColor: \"#b2261c\",\r\n                                              }}\r\n                                              className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                            >\r\n                                              Close\r\n                                            </button>\r\n                                            <button\r\n                                              onClick={handleApply}\r\n                                              // color=\"primary\"\r\n                                              className=\"btn rounded-pill text-white px-4\"\r\n                                              style={{\r\n                                                backgroundColor: \"#169C50\",\r\n                                              }}\r\n                                            >\r\n                                              Apply\r\n                                            </button>\r\n                                          </div>\r\n                                        </form>\r\n                                      </div>\r\n                                    </>\r\n                                  </div>\r\n                                }\r\n                              />\r\n                            </MyModal>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row  mb-3\">\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Company name\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={formData.companyName}\r\n                            onChange={(event) =>\r\n                              handleFieldChange(\r\n                                \"companyName\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                          />\r\n\r\n                          {/* <FormControl fullWidth>\r\n                            <InputLabel id=\"city-label\">City</InputLabel>\r\n                            <Select\r\n                              labelId=\"city-label\"\r\n                              sx={{ width: \"100%\" }}\r\n                              label=\"City\"\r\n                              name=\"city\"\r\n                              onChange={updateCity}\r\n                              value={formData.city}\r\n                            >\r\n                              {options.city.map((option, i) => (\r\n                                <MenuItem key={i} value={option.options}>\r\n                                  {option.options}\r\n                                </MenuItem>\r\n                              ))}\r\n                              <MenuItem value=\"\"></MenuItem>\r\n                            </Select>\r\n                          </FormControl> */}\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.city.map((option) => option)}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateCity(value);\r\n                            //   // console.log(value);\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateCity(\"\");\r\n                              } else {\r\n                                updateCity(value);\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.city ? formData.city : \"\",\r\n                              category: \"city\",\r\n                            }}\r\n                            fullWidth\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"City\"\r\n                                placeholder=\"City\"\r\n                              />\r\n                            )}\r\n                          />\r\n\r\n                          {/* <FormControl fullWidth>\r\n                            <InputLabel id=\"city-label\">Area</InputLabel>\r\n                            <Select\r\n                              labelId=\"city-label\"\r\n                              sx={{ width: \"100%\" }}\r\n                              label=\"Area\"\r\n                              name=\"area\"\r\n                              onChange={updateArea}\r\n                              value={formData.area}\r\n                            >\r\n                              {options.area.map((option, i) => (\r\n                                <MenuItem key={i} value={option.options}>\r\n                                  {option.options}\r\n                                </MenuItem>\r\n                              ))}\r\n                              <MenuItem value=\"\"></MenuItem>\r\n                            </Select>\r\n                          </FormControl> */}\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          {\" \"}\r\n                          <TextField\r\n                            id=\"interviewStatus\"\r\n                            name=\"interviewStatus\"\r\n                            label=\"Status\"\r\n                            // className=\"mt-2\"\r\n                            select\r\n                            value={formData.interviewStatus}\r\n                            fullWidth\r\n                            onChange={(event) =>\r\n                              handleFieldChange(\r\n                                \"interviewStatus\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                          >\r\n                            {InterviewStatus.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.area.map((option) => option)}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateArea(value ? value.options : \"\");\r\n                            //   // console.log(event, \"love\");\r\n                            //   console.log(value.options, \"ghghghggg\");\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateArea(\"\");\r\n                              } else {\r\n                                updateArea(value ? value.options : \"\");\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.area ? formData.area : \"\",\r\n                              category: \"areas\",\r\n                            }}\r\n                            fullWidth\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Area\"\r\n                                placeholder=\"Area\"\r\n                                value={formData.area}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-sm-3 \">\r\n                        {adminList && isSuperAdmin && (\r\n                          <TextField\r\n                            onChange={(e) => handleAssignToChange(e)}\r\n                            name=\"AssignedTo\"\r\n                            id=\"AssignedTo\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Assigned To\"\r\n                            value={formData.scheduledBy}\r\n                            defaultValue={formData.scheduledBy}\r\n                          >\r\n                            <MenuItem value={0}>ALL</MenuItem>\r\n                            {adminList.map((el) => (\r\n                              <MenuItem key={el.id} value={el.id}>\r\n                                {el.userName}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"d-flex flex-row gap-2 justify-content-end mt-2\">\r\n                        <button\r\n                          className={`rounded-pill ${interviewStyle.Filterbutton}`}\r\n                          variant=\"outlined\"\r\n                          onClick={(e) => {\r\n                            handleClear(e);\r\n                          }}\r\n                        >\r\n                          Clear All\r\n                        </button>\r\n                        <button\r\n                          className={`rounded-pill ${interviewStyle.search}`}\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          sx={{ minWidth: \"150px\" }}\r\n                        >\r\n                          Search\r\n                          {/* {!formData.loading && !formData.completed && \"Search\"}\r\n\r\n                          {\r\n                            formData.loading && (\r\n                              <div className=\"spinner-border spinner-border-sm text-light\"></div>\r\n                            ) // Add spinner here\r\n                          }\r\n                          {formData.completed && \"Submitted\"} */}\r\n                        </button>\r\n                      </div>\r\n                    </Stack>\r\n                  </form>\r\n                </>\r\n              </div>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable default-case */\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { MyModal, dateFormate, numbersOnlyTest } from \"../../../utility\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { useState } from \"react\";\r\n\r\nimport dayjs from \"dayjs\";\r\n\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { PostRescheduleInterviews } from \"../../../apiServices\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\n\r\nconst InterviewReschedule = ({ interviewId, onSuccess, onClose }) => {\r\n  const [rescheduleDetails, setRescheduleDetails] = useState({\r\n    // showPopup: true,\r\n    reScheduledOn: \"\",\r\n    interviewId: interviewId,\r\n    notes: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    interviewId: \"\",\r\n    reScheduledOn: \"\",\r\n  });\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n\r\n  const showCandidateId = interviewId != null;\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!rescheduleDetails.interviewId) {\r\n      newErrors.interviewId = \"Candidate ID is required\";\r\n    }\r\n\r\n    if (!rescheduleDetails.reScheduledOn) {\r\n      newErrors.reScheduledOn = \"Date is required\";\r\n    }\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, []);\r\n  function handleFieldChange(field, value) {\r\n    console.log(numbersOnlyTest(value));\r\n    switch (field) {\r\n      case \"interviewId\":\r\n        if (numbersOnlyTest(value)) {\r\n          setRescheduleDetails((prev) => ({ ...prev, [field]: value }));\r\n        }\r\n        break;\r\n      case \"reScheduledOn\":\r\n        setRescheduleDetails((prev) => ({ ...prev, [field]: value }));\r\n        setRescheduleDetails((prev) => ({\r\n          ...prev,\r\n          [field]: dateFormate(value.$d).trim(),\r\n        }));\r\n        setErrors((prev) => ({ ...prev, reScheduledOn: \"\" }));\r\n        break;\r\n    }\r\n  }\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, [rescheduleDetails]);\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, [rescheduleDetails]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // showPopup(true);\r\n    if (validateForm()) {\r\n      console.log(\"Form submitted:\", rescheduleDetails);\r\n      // setRescheduleDetails((prev) => ({ ...prev, loading: true }));\r\n      PostRescheduleInterviews(rescheduleDetails)\r\n        .then(() => {\r\n          setShowSuccess(true);\r\n          setTimeout(() => {\r\n            setShowSuccess(false);\r\n            // showPopup(false);\r\n            setRescheduleDetails({\r\n              // showPopup: false,\r\n              reScheduledOn: \"\",\r\n              interviewId: interviewId,\r\n              // notes: notes,\r\n              notes: \"\",\r\n            });\r\n          }, [1000]);\r\n\r\n          onSuccess();\r\n          onClose();\r\n          // showPopup(false);\r\n        })\r\n\r\n        .catch(() => {\r\n          alert(\"Something went wrong, Please try again later.\");\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        {/* <div className=\"\">\r\n          <span\r\n            // // // className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              showPopup(true);\r\n            }}\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Reschedule\r\n          </span>\r\n        </div> */}\r\n        <div>\r\n          {rescheduleDetails && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                // zIndex={1001}\r\n                childComponent={\r\n                  <>\r\n                    <div className=\"d-flex flex-row   \">\r\n                      <h4 className=\"text-center\">Interview Reschedule</h4>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit}>\r\n                      {!showCandidateId && (\r\n                        <TextField\r\n                          id=\"interviewId\"\r\n                          label=\"Interview ID\"\r\n                          name=\"interviewId\"\r\n                          value={rescheduleDetails.interviewId}\r\n                          onChange={(event) =>\r\n                            handleFieldChange(\"interviewId\", event.target.value)\r\n                          }\r\n                          error={Boolean(errors.interviewId)}\r\n                          helperText={errors.interviewId}\r\n                          fullWidth\r\n                          required\r\n                          inputProps={{ maxLength: 10 }}\r\n                        />\r\n                      )}\r\n                      <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <DatePicker\r\n                          label=\"Date\"\r\n                          value={rescheduleDetails.reScheduledOn}\r\n                          name=\"reScheduledOn\"\r\n                          onChange={(value) =>\r\n                            handleFieldChange(\"reScheduledOn\", value)\r\n                          }\r\n                          minDate={dayjs(new Date())}\r\n                          fullWidth\r\n                          required\r\n                          slotProps={{\r\n                            textField: {\r\n                              helperText: errors.date,\r\n                              error: Boolean(errors.date),\r\n                            },\r\n                          }}\r\n                        />\r\n                      </LocalizationProvider>\r\n\r\n                      <div style={{ marginTop: \"16px\" }}>\r\n                        <TextField\r\n                          id=\"outlined-multiline-flexible\"\r\n                          label=\"Add Notes\"\r\n                          multiline\r\n                          // error={isNotesEmpty}\r\n                          // helperText={isNotesEmpty ? \"Notes cannot be empty\" : \"\"}\r\n                          // required\r\n                          onChange={(event) => {\r\n                            setRescheduleDetails((prev) => ({\r\n                              ...prev,\r\n                              notes: event.target.value,\r\n                            }));\r\n                            // setIsNotesEmpty(false);\r\n                          }}\r\n                          maxRows={4}\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"mt-3 d-flex justify-content-end gap-2 flex-wrap align-items-center \">\r\n                        <Button\r\n                          onClick={() => {\r\n                            onClose();\r\n                          }}\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                        >\r\n                          Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\" size=\"small\">\r\n                          Reschedule\r\n                        </Button>\r\n                      </div>\r\n                    </form>\r\n                  </>\r\n                }\r\n              />\r\n            </MyModal>\r\n          )}\r\n\r\n          {showSuccess && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                childComponent={<SuccessTick HeadText=\"Successfully\" />}\r\n              />\r\n            </MyModal>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InterviewReschedule;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  CircularProgress,\r\n  FormControl,\r\n  FormHelperText,\r\n} from \"@mui/material\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\n\r\nimport {\r\n  GetAllsdminDetails,\r\n  GetcanInterviews,\r\n  PutInterviewStatus,\r\n  getCandidateLead,\r\n  getcandidateDetails,\r\n  PostinterviewInactive,\r\n} from \"../../../apiServices\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  DMMMYYYY_formate,\r\n  MyModal,\r\n  capitalizeWords,\r\n  convertDateDDMMYYY,\r\n  convertDateYYYYMMDD,\r\n  textTruncate,\r\n} from \"../../../utility\";\r\nimport interviewStyle from \"./candidateInterviewSchedule.module.scss\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { Pagination, Stack, TextField, Tooltip } from \"@mui/material\";\r\nimport {\r\n  commonPopupActions,\r\n  interviewListActions,\r\n} from \"../../../redux-store/store\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport Nojoid from \"./Nojoid\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport ScheduleInterviewFilter from \"./interviewFilter\";\r\nimport InterviewReschedule from \"../CandidateInterview/interviewReschedule.\";\r\nimport { Box, isWidthDown } from \"@material-ui/core\";\r\nimport canLeadStyle from \"../CandidateLeadTable/candidateLead.module.scss\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CandidateInterviewCard from \"../interviewCard/interviewCard\";\r\n\r\n// import { Dropdown } from \"bootstrap\";\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#e2dedeed\",\r\n    color: \"#545454f0\",\r\n    maxWidth: \"350px\",\r\n    padding: \"8px\",\r\n    \"@media (max-width: 992px)\": {\r\n      // backgroundColor: \"red\",\r\n      // padding: \"5px 50px\",\r\n      // textAlign: \"left\",\r\n    },\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"8px\",\r\n    \"@media (max-width: 992px)\": {\r\n      // backgroundColor: \"red\",\r\n      // padding: \"5px 50px\",\r\n      // textAlign: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction RecentActivity({ data }) {\r\n  const date = {\r\n    rescheduledDateTime: data.rescheduledDateTime,\r\n    joinedOn: data.joinedOn,\r\n    selectedOn: data.selectedOn,\r\n    notSelectedOn: data.notSelectedOn,\r\n    offerRejectedOn: data.offerRejectedOn,\r\n    notAttendedOn: data.notAttendedOn,\r\n    attendedOn: data.attendedOn,\r\n    leftTheCompanyAt: data.leftTheCompanyAt,\r\n    awaitingOn: data.awaitingOn,\r\n    willJoiningOn: data.willJoiningOn,\r\n    callNotAttendOn: data.callNotAttendOn,\r\n  };\r\n  if (date.rescheduledDateTime) {\r\n    date.rescheduledDateTime = date.rescheduledDateTime\r\n      .replace(\"T\", \" \")\r\n      .replace(\".000+0000\", \"\");\r\n  }\r\n  let mostRecentDate = null;\r\n  let mostRecentKey = null;\r\n\r\n  for (const key in date) {\r\n    const dateStr = date[key];\r\n    if (dateStr && dateStr.includes(\"-\")) {\r\n      const currentDate = new Date(dateStr);\r\n\r\n      if (!mostRecentDate || currentDate > mostRecentDate) {\r\n        mostRecentDate = currentDate;\r\n        mostRecentKey = key;\r\n        // console.log(mostRecentKey);\r\n        // console.log(mostRecentDate);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (mostRecentKey) {\r\n    if (mostRecentKey === \"selectedOn\") {\r\n      return <div className={`${interviewStyle.Selected}`}>Selected</div>;\r\n    } else if (mostRecentKey === \"notSelectedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.Notselected}`}>Not Selected</div>\r\n      );\r\n    } else if (mostRecentKey === \"notAttendedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.NotAttended}`}>Not Attended</div>\r\n      );\r\n    } else if (mostRecentKey === \"offerRejectedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.rejected_label}`}>Offer Rejected</div>\r\n      );\r\n    } else if (mostRecentKey === \"joinedOn\") {\r\n      return <div className={`${interviewStyle.joined}`}>Joined</div>;\r\n    } else if (mostRecentKey === \"rescheduledDateTime\") {\r\n      return (\r\n        <div className={`${interviewStyle.rescheduledChips}`}>Rescheduled</div>\r\n      );\r\n    } else if (mostRecentKey === \"attendedOn\") {\r\n      return <div className={`${interviewStyle.Attended}`}>Attending</div>;\r\n    } else if (mostRecentKey === \"leftTheCompanyAt\") {\r\n      return (\r\n        <div className={`${interviewStyle.leftCompany}`}>Left company</div>\r\n      );\r\n    } else if (mostRecentKey === \"willJoiningOn\") {\r\n      return <div className={`${interviewStyle.willJoining}`}>Will Join</div>;\r\n    } else if (mostRecentKey === \"awaitingOn\") {\r\n      return <div className={`${interviewStyle.Awaitingchips}`}>Awaiting</div>;\r\n    } else if (mostRecentKey === \"callNotAttendOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.callNotAttend}`}>\r\n          Call Not Attended\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nexport default function CandidateInterviewTable({ width }) {\r\n  const isSmallScreen = isWidthDown(\"md\", width);\r\n  const [isRescheduleOpen, setIsRescheduleOpen] = useState(false);\r\n  const [showLoader, setShowLoader] = useState(false); // New state for loader\r\n  const [CandidateInterviewList, setCandidateInterviewList] = React.useState(\r\n    []\r\n  );\r\n  // const [isDateSelected, setIsDateSelected] = useState(false);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [enablebutton, setenablebutton] = useState(false);\r\n  const [showConfirmPopup, setShowConfirmPopup] = useState(false);\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [currentInterviewId, setCurrentInterviewId] = useState(\"\");\r\n\r\n  const [interviewCard, setInterviewCard] = useState({\r\n    show: false,\r\n    id: \"\",\r\n  });\r\n\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [candidatename, setcandidate] = useState(false);\r\n  const [contactPersonName, setContactPersonName] = useState(\"\");\r\n  const [contactID, setcontactID] = useState(\"\");\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [showSuccessinactive, setshowSuccessinactive] = useState(false);\r\n  const [pageCount, setPageCount] = useState({\r\n    totalPages: 0,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n  });\r\n  const interviewFilter = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.size\r\n  );\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n  const adminIDTwo = localStorage.getItem(\"adminID\") === \"2\";\r\n  const [open, setOpen] = useState(false);\r\n  const [isNotesEmpty, setIsNotesEmpty] = useState(false);\r\n  const [isCtc, setIsCtc] = useState(false);\r\n  const handleClick = (id) => {\r\n    setCurrentInterviewId(id);\r\n  };\r\n  const [isDateSelected, setIsDateSelected] = useState(false);\r\n  const [interviewStatus, setInterviewStatus] = useState({\r\n    caninterviewid: \"\",\r\n    statusfield: \"\",\r\n    date: \"\",\r\n    willJoining: \"\",\r\n    notes: \"\",\r\n    ctc: \"\",\r\n  });\r\n  const inputRef = {\r\n    attended: useRef(),\r\n    notAttended: useRef(),\r\n    selected: useRef(),\r\n    notSelected: useRef(),\r\n    offerRejected: useRef(),\r\n    joined: useRef(),\r\n    leftCompany: useRef(),\r\n    rescheduled: useRef(),\r\n    isAwaiting: useRef(),\r\n    callNotAttend: useRef(),\r\n  };\r\n  const handleButtonClick = (refName) => {\r\n    const ref = inputRef[refName];\r\n    if (ref.current) {\r\n      ref.current.click();\r\n    }\r\n  };\r\n\r\n  const handleInactiveopen = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  function handleCloseNotes() {\r\n    setShowConfirmPopup(false);\r\n    setIsNotesEmpty(false);\r\n    setIsDateSelected(false);\r\n    setenablebutton(false);\r\n    setInterviewStatus({\r\n      caninterviewid: \"\",\r\n      statusfield: \"\",\r\n      date: \"\",\r\n      willJoining: \"\",\r\n      notes: \"\",\r\n      ctc: \"\",\r\n    });\r\n  }\r\n\r\n  function handleConfirmationOpen() {\r\n    setShowConfirmPopup(true);\r\n  }\r\n\r\n  const handleOkButtonClick = async () => {\r\n    try {\r\n      setshowSuccessinactive(true);\r\n      const data = await PostinterviewInactive(currentInterviewId);\r\n\r\n      console.log(\"API Response:\", data);\r\n\r\n      setTimeout(() => {\r\n        setshowSuccessinactive(false);\r\n        setModalOpen(false);\r\n      }, 1500);\r\n      GetcanInterviews(interviewFilter).then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      });\r\n    } catch (error) {\r\n      console.error(\"API Error:\", error);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    setCandidateInterviewList({\r\n      jobId: 0,\r\n      contactNumber: null,\r\n      candidateMobileNumber: 0,\r\n      companyName: null,\r\n      interviewDate: null,\r\n      jobCategory: null,\r\n      area: null,\r\n      city: null,\r\n      interviewCurrentStatus: -1,\r\n      scheduledBy: null,\r\n      endDate: null,\r\n      createdTime: null,\r\n      page: 1,\r\n      size: 10,\r\n    });\r\n\r\n    // Fetch data after resetting\r\n    GetcanInterviews(interviewFilter)\r\n      .then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n\r\n  const handleInterviewCard = () => {\r\n    setInterviewCard({\r\n      show: true,\r\n      id: currentInterviewId,\r\n    });\r\n  };\r\n\r\n  const handleRadioBtn = (candidateId, statusFieldName, event) => {\r\n    // let isChecked = event.target.checked;\r\n    console.log(candidateId, \"candidateId\");\r\n    if (!event || event) {\r\n      handleConfirmationOpen();\r\n      setInterviewStatus((prev) => ({\r\n        ...prev,\r\n        caninterviewid: currentInterviewId,\r\n        statusfield: statusFieldName,\r\n      }));\r\n\r\n      // Retrieve contactPersonName from CandidateInterviewList\r\n      const selectedCandidate = CandidateInterviewList.find(\r\n        (candidate) => candidate.CanInterviewsModel.id === currentInterviewId\r\n      );\r\n      if (selectedCandidate) {\r\n        setContactPersonName(selectedCandidate.CandidateModel.firstName);\r\n      }\r\n      if (selectedCandidate) {\r\n        setcontactID(selectedCandidate.CanInterviewsModel.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const ConfirmFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // if (interviewStatus.notes.trim() === \"\") {\r\n    //   setIsNotesEmpty(true);\r\n    //   return;\r\n    // }\r\n    if (interviewStatus.notes.trim() === \"\") {\r\n      setIsNotesEmpty(true);\r\n      return;\r\n    } else {\r\n      setenablebutton(true);\r\n      PutInterviewStatus(\r\n        interviewStatus.caninterviewid,\r\n        interviewStatus.statusfield,\r\n        interviewStatus.date,\r\n        interviewStatus.willJoining,\r\n        interviewStatus.notes\r\n      ).then(() => {\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n          setenablebutton(false);\r\n        }, 3000);\r\n        setInterviewStatus({\r\n          caninterviewid: \"\",\r\n          statusfield: \"\",\r\n          date: \"\",\r\n          willJoining: \"\",\r\n          notes: \"\",\r\n        });\r\n        GetcanInterviews(interviewFilter).then((data) => {\r\n          const InterviewList = data.canInterviewList.map((item) => item);\r\n          setCandidateInterviewList(InterviewList);\r\n          setPageCount((prev) => ({\r\n            ...prev,\r\n            totalPages: Math.ceil(data.totalCount / size),\r\n          }));\r\n          setOpen(false);\r\n        });\r\n      });\r\n    }\r\n  };\r\n  const ConfirmFormSubmitWithoutnotes = (e) => {\r\n    e.preventDefault();\r\n    console.log(e, \"eeee\");\r\n    if (\r\n      interviewStatus.statusfield === \"isJoined\" &&\r\n      interviewStatus.date === \"\"\r\n    ) {\r\n      setIsDateSelected(true);\r\n      // setIsCtc(true);\r\n      return;\r\n    } else if (\r\n      interviewStatus.statusfield === \"isJoined\" &&\r\n      interviewStatus.ctc === \"\"\r\n    ) {\r\n      setIsCtc(true);\r\n      return;\r\n    } else {\r\n      setenablebutton(true);\r\n      PutInterviewStatus(\r\n        interviewStatus.caninterviewid,\r\n        interviewStatus.statusfield,\r\n        interviewStatus.date,\r\n        interviewStatus.willJoining,\r\n        interviewStatus.notes,\r\n        interviewStatus.ctc\r\n      ).then(() => {\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n          setenablebutton(false);\r\n        }, 3000);\r\n        setInterviewStatus({\r\n          caninterviewid: \"\",\r\n          statusfield: \"\",\r\n          date: \"\",\r\n          willJoining: \"\",\r\n          notes: \"\",\r\n          ctc: \"\",\r\n        });\r\n        GetcanInterviews(interviewFilter).then((data) => {\r\n          const InterviewList = data.canInterviewList.map((item) => item);\r\n          setCandidateInterviewList(InterviewList);\r\n          setPageCount((prev) => ({\r\n            ...prev,\r\n            totalPages: Math.ceil(data.totalCount / size),\r\n          }));\r\n          setOpen(false);\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // const ConfirmFormSubmitWithoutnotes = (e) => {\r\n  //   e.preventDefault();\r\n  //   // if (interviewStatus.notes.trim() === \"\") {\r\n  //   //   setIsNotesEmpty(true);\r\n  //   //   return;\r\n  //   // }\r\n  //   if (\r\n  //     interviewStatus.statusfield === \"isJoined\" &&\r\n  //     interviewStatus.date !== \"\"\r\n  //   ) {\r\n  //     setIsDateSelected(true);\r\n  //     return;\r\n  //   } else {\r\n  //     PutInterviewStatus(\r\n  //       interviewStatus.caninterviewid,\r\n  //       interviewStatus.statusfield,\r\n  //       interviewStatus.date,\r\n  //       interviewStatus.willJoining,\r\n  //       interviewStatus.notes\r\n  //     ).then(() => {\r\n  //       setShowSuccess(true);\r\n  //       setTimeout(() => {\r\n  //         setShowSuccess(false);\r\n  //         setShowConfirmPopup(false);\r\n  //       }, 3000);\r\n  //       setInterviewStatus({\r\n  //         caninterviewid: \"\",\r\n  //         statusfield: \"\",\r\n  //         date: \"\",\r\n  //         willJoining: \"\",\r\n  //         notes: \"\",\r\n  //       });\r\n  //       GetcanInterviews(interviewFilter).then((data) => {\r\n  //         const InterviewList = data.canInterviewList.map((item) => item);\r\n  //         setCandidateInterviewList(InterviewList);\r\n  //         setPageCount((prev) => ({\r\n  //           ...prev,\r\n  //           totalPages: Math.ceil(data.totalCount / size),\r\n  //         }));\r\n  //         setOpen(false);\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const handlePopupDetails = (id, type) => {\r\n    console.log(id);\r\n\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: type,\r\n        id: id,\r\n      })\r\n    );\r\n  };\r\n  const handleCandidateDetails = async (candidateId, type) => {\r\n    let data;\r\n    if (type === \"RegisterCandidate\") {\r\n      data = await getcandidateDetails(candidateId);\r\n    } else if (type === \"CandidateLead\") {\r\n      data = await getCandidateLead(candidateId);\r\n    }\r\n\r\n    // Dispatch action to show the popup and pass the fetched data\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: \"candidateDetails\",\r\n        id: candidateId,\r\n        type: type,\r\n        data: data,\r\n      })\r\n    );\r\n  };\r\n  function Getreschedule() {\r\n    GetcanInterviews(interviewFilter).then((data) => {\r\n      // eslint-disable-next-line no-use-before-define\r\n      console.log(InterviewList);\r\n      const InterviewList = data.canInterviewList.map((item) => item);\r\n      setCandidateInterviewList(InterviewList);\r\n      setPageCount((prev) => ({\r\n        ...prev,\r\n        // totalCount: totalElements,\r\n        totalPages: Math.ceil(data.totalCount / size),\r\n      }));\r\n    });\r\n  }\r\n\r\n  const Dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    // console.log(isSuperAdmin, \"--------------------------Super\");\r\n    if (isSuperAdmin) {\r\n      Dispatch(interviewListActions.setInterviewFilterShceduleBy(0));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [adminDetails]);\r\n\r\n  useEffect(() => {\r\n    setShowLoader(true); // Show loader before making the API call\r\n\r\n    console.log(\r\n      interviewFilter,\r\n      \"interviewFilter--------------------------------------\"\r\n    );\r\n\r\n    GetcanInterviews(interviewFilter)\r\n      .then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setTotalCount(data.totalCount);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false); // Hide loader after the API call is complete\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [interviewFilter]);\r\n\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n\r\n    Dispatch(interviewListActions.setInterviewFilterPage(currentPage));\r\n  }\r\n\r\n  function candidateSize(size) {\r\n    Dispatch(interviewListActions.setInterviewFilterSize(size));\r\n    // updateData();\r\n    console.log(size);\r\n  }\r\n  function copyToClipboard(text) {\r\n    const textField = document.createElement(\"textarea\");\r\n    textField.innerText = text;\r\n    document.body.appendChild(textField);\r\n    textField.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(textField);\r\n    // const cell = document.activeElement;\r\n    // cell.title = \"Copied\";\r\n  }\r\n  const handleMenuClick = () => {\r\n    // event.preventDefault();\r\n    setIsRescheduleOpen(true);\r\n  };\r\n  const closeRescheduleModal = () => {\r\n    setIsRescheduleOpen(false);\r\n  };\r\n\r\n  const [adminName, setAdminName] = useState([]);\r\n  const [adminid, setAdminId] = useState([]);\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminNames = data.map((item) => item.userName);\r\n      const adminIds = data.map((item) => item.id);\r\n      setAdminName(adminNames);\r\n      setAdminId(adminIds);\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className={`${interviewStyle.FilterHead}`}>\r\n        {\" \"}\r\n        <div className=\"d-flex \">\r\n          Show {\"  \"}\r\n          <select\r\n            name=\"\"\r\n            id=\"\"\r\n            className=\"px-1 py-1 mx-2\"\r\n            onChange={(event) => candidateSize(event.target.value)}\r\n          >\r\n            <option selected value=\"10\">\r\n              10\r\n            </option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n          </select>\r\n          {\"   \"}\r\n          Entries\r\n        </div>\r\n        <div className={`${canLeadStyle.filterAdduser}`}>\r\n          <div className=\"mt-1 me-2 \">Total Count : {totalCount}</div>\r\n          <div\r\n            className=\"p-1 success me-2 mx-2 ms-auto\"\r\n            onClick={handleReset}\r\n            // style={{ : \"#169C50\", color: \"white\" }}\r\n          >\r\n            {/* {\r\n              <p\r\n                style={{\r\n                  backgroundColor: showRedDot ? \"red\" : \"transparent\",\r\n                  width: \"10px\",\r\n                  height: \"10px\",\r\n                  borderRadius: \"50%\",\r\n                }}\r\n              ></p>\r\n            } */}\r\n            <LuRefreshCcw />\r\n          </div>\r\n          <ScheduleInterviewFilter />\r\n        </div>\r\n      </div>\r\n\r\n      <>\r\n        <Backdrop\r\n          sx={{\r\n            color: \"#fff\",\r\n            zIndex: (theme) => theme.zIndex.drawer + 1,\r\n          }}\r\n          open={showLoader}\r\n          onClick={() => {}} // Prevent closing on backdrop click\r\n        >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n      </>\r\n\r\n      {/* <button onClick={togglePosition}>Toggle Position</button>\r\n\r\n      {isAbsolute ? (\r\n        <div className={`${interviewStyle.card} `}>\r\n          <div className={`${interviewStyle.absolute}`}>\r\n            <p>This is a card</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n      {/* sx={{ maxHeight: \"70vh\", maxWidth: \"1000%\" }} */}\r\n      <div className={`${interviewStyle.Container}`}>\r\n        {/* <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}> */}\r\n        <div className={`table-responsive-sm ${interviewStyle.responsive}`}>\r\n          <TableContainer className={`${interviewStyle.TableContainer}`}>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"sticky table\"\r\n              size={isSmallScreen ? \"medium\" : \"small\"}\r\n              className={`${interviewStyle.TableDetails}`}\r\n              // style={{ width: \"1600px\", overflowX: \"auto\" }}\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell\r\n                  // className={`mt-1 ${interviewStyle.StyledTableCell}`}\r\n                  >\r\n                    Name\r\n                  </StyledTableCell>\r\n                  <StyledTableCell\r\n                    // className={` ${interviewStyle.StyledTableCell}`}\r\n                    style={{ width: \"auto\" }}\r\n                    align=\"left\"\r\n                  >\r\n                    Mobile&nbsp;Number\r\n                  </StyledTableCell>\r\n                  <StyledTableCell style={{ width: \"auto\" }} align=\"left\">\r\n                    Job&nbsp;Category\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    Company&nbsp;Name\r\n                  </StyledTableCell>\r\n                  {/* <StyledTableCell align=\"left\">Area</StyledTableCell> */}\r\n                  {/* <StyledTableCell align=\"left\">City</StyledTableCell> */}\r\n                  {isSuperAdmin && (\r\n                    <StyledTableCell align=\"left\">Scheduled by</StyledTableCell>\r\n                  )}\r\n                  {/* <StyledTableCell align=\"left\">Possible %</StyledTableCell> */}\r\n                  <StyledTableCell align=\"left\">\r\n                    Interview&nbsp;Date\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    Created&nbsp;On\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">Status</StyledTableCell>\r\n                  {/*\r\n                   */}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {CandidateInterviewList.length > 0 ? (\r\n                  <>\r\n                    {CandidateInterviewList.map((candidate, i) => (\r\n                      <TableRow\r\n                        sx={{\r\n                          \"&:last-child td, &:last-child th\": { border: 0 },\r\n                        }}\r\n                        key={i}\r\n                        onClick={() => {\r\n                          setInterviewStatus((prev) => ({\r\n                            ...prev,\r\n                            id: candidate.id,\r\n                          }));\r\n                          setcandidate(candidate);\r\n                        }}\r\n                      >\r\n                        <StyledTableCell\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={candidate.CandidateModel?.firstName || null}\r\n                          onClick={() => {\r\n                            handleCandidateDetails(\r\n                              candidate.CandidateModel.id,\r\n                              \"RegisterCandidate\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          {candidate.CandidateModel?.firstName\r\n                            ? textTruncate(\r\n                                capitalizeWords(\r\n                                  candidate.CandidateModel.firstName\r\n                                ),\r\n                                15\r\n                              ) +\r\n                              \" \" +\r\n                              textTruncate(\r\n                                capitalizeWords(\r\n                                  candidate.CandidateModel.lastName\r\n                                ),\r\n                                5\r\n                              )\r\n                            : \"-\"}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          onClick={() => {\r\n                            if (\r\n                              candidate.CandidateModel &&\r\n                              candidate.CandidateModel.mobileNumber\r\n                            ) {\r\n                              copyToClipboard(\r\n                                candidate.CandidateModel.mobileNumber\r\n                              );\r\n                            }\r\n                          }}\r\n                        >\r\n                          {candidate.CandidateModel &&\r\n                          candidate.CandidateModel.mobileNumber\r\n                            ? String(\r\n                                candidate.CandidateModel.mobileNumber\r\n                              ).slice(0, 10)\r\n                            : \"\"}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          align=\"left\"\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={\r\n                            candidate.JobModel.jobCategory &&\r\n                            candidate.JobModel.jobCategory.length > 20\r\n                              ? candidate.JobModel.jobCategory\r\n                              : null\r\n                          }\r\n                          onClick={() => {\r\n                            copyToClipboard(\r\n                              candidate.CandidateModel.jobCategory\r\n                            );\r\n                            handlePopupDetails(\r\n                              candidate.CanInterviewsModel.jobId,\r\n                              \"jobDetails\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          {candidate.JobModel.jobCategory &&\r\n                          candidate.JobModel.jobCategory.length > 20\r\n                            ? `${candidate.JobModel.jobCategory.slice(\r\n                                0,\r\n                                20\r\n                              )}...`\r\n                            : candidate.JobModel.jobCategory}\r\n                        </StyledTableCell>\r\n\r\n                        <StyledTableCell\r\n                          align=\"left\"\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={\r\n                            candidate.CanInterviewsModel.companyName.length > 20\r\n                              ? candidate.CanInterviewsModel.companyName\r\n                              : null\r\n                          }\r\n                          onClick={() => {\r\n                            copyToClipboard(\r\n                              candidate.CanInterviewsModel.companyName\r\n                            );\r\n                            handlePopupDetails(\r\n                              candidate.EmployerModel.id,\r\n                              \"employerDetails\"\r\n                            );\r\n                            // Update the title attribute with \"Copied\"\r\n                            // cell.title = \"Copied\";\r\n                          }}\r\n                        >\r\n                          {candidate.CanInterviewsModel.companyName.length > 20\r\n                            ? `${candidate.CanInterviewsModel.companyName.slice(\r\n                                0,\r\n                                20\r\n                              )}...`\r\n                            : candidate.CanInterviewsModel.companyName}\r\n                        </StyledTableCell>\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.area}\r\n                        </StyledTableCell> */}\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.city}\r\n                        </StyledTableCell> */}\r\n                        {isSuperAdmin && (\r\n                          <StyledTableCell align=\"left\">\r\n                            <>\r\n                              {\r\n                                adminName[\r\n                                  adminid.indexOf(\r\n                                    candidate.CanInterviewsModel.adminId\r\n                                      .length > 15\r\n                                      ? `${candidate.CanInterviewsModel.adminId.slice(\r\n                                          0,\r\n                                          15\r\n                                        )}...`\r\n                                      : candidate.CanInterviewsModel.adminId\r\n                                  )\r\n                                ]\r\n                              }\r\n                            </>\r\n                          </StyledTableCell>\r\n                        )}\r\n\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.candidatePercentage}\r\n                        </StyledTableCell> */}\r\n                        <StyledTableCell align=\"left\">\r\n                          {\r\n                            // eslint-disable-next-line react/jsx-pascal-case\r\n                            <DMMMYYYY_formate\r\n                              dateValue={\r\n                                !candidate.CanInterviewsModel.rescheduled\r\n                                  ? candidate.CanInterviewsModel.interviewDate\r\n                                  : candidate.CanInterviewsModel.rescheduledDate\r\n                              }\r\n                            />\r\n                          }\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"left\">\r\n                          {\r\n                            // eslint-disable-next-line react/jsx-pascal-case\r\n                            <DMMMYYYY_formate\r\n                              dateValue={\r\n                                candidate.CanInterviewsModel.createdTime\r\n                              }\r\n                            />\r\n                          }\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"left\">\r\n                          <div className={`${interviewStyle.Popper}`}>\r\n                            {interviewFilter.interviewStatus === -1 ? (\r\n                              <div>\r\n                                <RecentActivity\r\n                                  data={candidate.CanInterviewsModel}\r\n                                />\r\n                              </div>\r\n                            ) : (\r\n                              <>\r\n                                <div className={interviewStyle.chips_wrp}>\r\n                                  {interviewFilter.interviewStatus === \"1\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Attended_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .attended && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .attended\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .attended && isChecked ? (\r\n                                              <Tooltip title=\" candidate attended\">\r\n                                                <label\r\n                                                  htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Attending\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Attending\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"2\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.NotAttended_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .notAttended && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .notAttended\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .notAttended && isChecked ? (\r\n                                              <Tooltip title=\" candidate attended\">\r\n                                                <label\r\n                                                  htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`}\r\n                                                >\r\n                                                  Not Attended\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`}\r\n                                              >\r\n                                                Not Attended\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n\r\n                                  {interviewFilter.interviewStatus === \"3\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Selected_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .selected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .selected\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .selected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate selected\">\r\n                                                <label\r\n                                                  htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Selected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Selected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"10\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.willJoining_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .willJoining && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .willJoining\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .willJoining && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate will Joining\">\r\n                                                <label\r\n                                                  htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Will Join\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                will Join\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"11\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.callNotAttend_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .callNotAttend && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`callNotAttend_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .callNotAttend\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .callNotAttend && isChecked ? (\r\n                                              <Tooltip title=\" candidate callNotAttend\">\r\n                                                <label\r\n                                                  htmlFor={`callNotAttend_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  callNotAttend\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`callNotAttend_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                callNotAttend\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"9\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.awaiting_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .awaiting && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .awaiting\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .awaiting && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate Awaiting\">\r\n                                                <label\r\n                                                  htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.Awaitingchips}`}\r\n                                                >\r\n                                                  Awaiting\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.Awaitingchips}`}\r\n                                              >\r\n                                                Awaiting\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"4\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.NotSelected_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .notSelected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .notSelected\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .notSelected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate selected\">\r\n                                                <label\r\n                                                  htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`}\r\n                                                >\r\n                                                  Not Selected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`}\r\n                                              >\r\n                                                Not Selected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"5\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.OfferRejected_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .offerRejected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .offerRejected\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .offerRejected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate Rejected\">\r\n                                                <label\r\n                                                  htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`} // Add this class\r\n                                                >\r\n                                                  Offer Rejected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`} // Add this class\r\n                                              >\r\n                                                Offer Rejected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"7\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.rescheduledChips\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .rescheduled && (\r\n                                          <>\r\n                                            <label>Reschedule</label>\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"6\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Joined_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .joined && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .joined\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .joined && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate joined\">\r\n                                                <label\r\n                                                  htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Joined\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Joined\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"8\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.LeftCompany_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .leftTheCompany && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .leftTheCompany\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .leftTheCompany && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate LeftCompany\">\r\n                                                <label\r\n                                                  htmlFor={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Left Company\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Left Company\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                </div>\r\n                              </>\r\n                            )}\r\n                            <div>\r\n                              <div className=\"btn-group dropstart\">\r\n                                <button\r\n                                  type=\"button\"\r\n                                  data-bs-toggle=\"dropdown\"\r\n                                  data-bs-no-caret=\"true\"\r\n                                  aria-expanded=\"false\"\r\n                                  onClick={(e) => {\r\n                                    handleClick(\r\n                                      candidate.CanInterviewsModel.id,\r\n                                      e\r\n                                    );\r\n                                  }}\r\n                                  style={{\r\n                                    border: \"none\",\r\n                                    background: \"none\",\r\n                                    color: \"#000\",\r\n                                    cursor: \"pointer\",\r\n                                    outline: \"none\",\r\n                                    position: \"relative\",\r\n                                    right: \"5px\",\r\n                                    // backgroundColor: \"red\",\r\n                                    fontSize: 20,\r\n                                  }}\r\n                                >\r\n                                  <BsThreeDotsVertical />\r\n                                  {/* <AiOutlineEdit /> */}\r\n                                </button>\r\n                                <ul\r\n                                  className=\"dropdown-menu\"\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  // ref={dropdownRef}\r\n                                >\r\n                                  {/* <!-- Dropdown menu links --> */}\r\n                                  {candidate.CanInterviewsModel.attended ===\r\n                                    false &&\r\n                                    candidate.CanInterviewsModel.notAttended ===\r\n                                      false && (\r\n                                      <>\r\n                                        <li\r\n                                          onClick={(event) =>\r\n                                            handleRadioBtn(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              \"isAttended\",\r\n                                              event.target.checked\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${interviewStyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                id={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                                name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                checked={\r\n                                                  candidate.CanInterviewsModel\r\n                                                    .attended\r\n                                                }\r\n                                              />\r\n\r\n                                              <label\r\n                                                htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#FEF08A\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />{\" \"}\r\n                                                Attending\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                      </>\r\n                                    )}\r\n\r\n                                  {candidate.CanInterviewsModel.selected ===\r\n                                    false &&\r\n                                    candidate.CanInterviewsModel.notAttended ===\r\n                                      false && (\r\n                                      <li\r\n                                        onClick={(event) =>\r\n                                          handleRadioBtn(\r\n                                            candidate.CanInterviewsModel.id,\r\n                                            \"isNotAttended\",\r\n                                            event.target.checked\r\n                                          )\r\n                                        }\r\n                                      >\r\n                                        <a className=\"dropdown-item\" href=\"#\">\r\n                                          <div\r\n                                            className={`${interviewStyle.select_wrp}`}\r\n                                          >\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              // ref={inputRef.notAttended}\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .notAttended\r\n                                              }\r\n                                            />\r\n\r\n                                            <label\r\n                                              htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                            >\r\n                                              <GoDotFill\r\n                                                style={{\r\n                                                  color: \"#FFA164\",\r\n                                                  fontSize: 20,\r\n                                                }}\r\n                                              />{\" \"}\r\n                                              Not Attended\r\n                                            </label>\r\n                                          </div>\r\n                                        </a>\r\n                                      </li>\r\n                                    )}\r\n                                  {candidate.CanInterviewsModel.attended ===\r\n                                    true && (\r\n                                    <>\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .awaiting === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isAwaiting\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.selected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .awaiting\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#8E44AD\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Awaiting\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isSelected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.selected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .selected\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#BBF7D0\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Selected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isNotSelected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.notSelected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .notSelected\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#FECACA\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Not Selected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                    </>\r\n                                  )}\r\n                                  {candidate.CanInterviewsModel.selected ===\r\n                                    true && (\r\n                                    <>\r\n                                      {candidate.CanInterviewsModel\r\n                                        .offerRejected === false && (\r\n                                        <li\r\n                                          onClick={(event) =>\r\n                                            handleRadioBtn(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              \"willJoining\",\r\n                                              event.target.checked\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${interviewStyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                // ref={inputRef.offerRejected}\r\n                                                type=\"checkbox\"\r\n                                                name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                id={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                                checked={\r\n                                                  candidate.CanInterviewsModel\r\n                                                    .willJoining\r\n                                                }\r\n                                              />\r\n\r\n                                              <label\r\n                                                htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#7B7D7D\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />{\" \"}\r\n                                                Will Join\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                      )}\r\n                                      {/* {candidate.CanInterviewsModel\r\n                                        .willJoining === false && (\r\n                                        \r\n                                      )} */}\r\n                                      {candidate.CanInterviewsModel.joined ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .offerRejected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isOfferRejected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  // ref={inputRef.offerRejected}\r\n                                                  type=\"checkbox\"\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .offerRejected\r\n                                                  }\r\n                                                />\r\n\r\n                                                <label\r\n                                                  htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#636363\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Offer Rejected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                      {candidate.CanInterviewsModel\r\n                                        .offerRejected === false &&\r\n                                        candidate.CanInterviewsModel.joined ===\r\n                                          false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isJoined\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  // ref={inputRef.joined}\r\n                                                  type=\"checkbox\"\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .joined\r\n                                                  }\r\n                                                />\r\n\r\n                                                <label\r\n                                                  htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#b7ff98\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Joined\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                    </>\r\n                                  )}\r\n                                  {candidate.CanInterviewsModel.joined ===\r\n                                    true && (\r\n                                    <li\r\n                                      onClick={(event) =>\r\n                                        handleRadioBtn(\r\n                                          candidate.CanInterviewsModel.id,\r\n                                          \"isLeftCompany\",\r\n                                          event.target.checked\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <a className=\"dropdown-item\" href=\"#\">\r\n                                        <div\r\n                                          className={`${interviewStyle.select_wrp}`}\r\n                                        >\r\n                                          <input\r\n                                            // ref={inputRef.leftCompany}\r\n                                            type=\"checkbox\"\r\n                                            name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                            id={`leftCompany_${candidate.CanInterviewsModel.id}`}\r\n                                            checked={\r\n                                              candidate.CanInterviewsModel\r\n                                                .leftCompany\r\n                                            }\r\n                                            // onChange={(event) =>\r\n\r\n                                            // }\r\n                                          />\r\n\r\n                                          <label\r\n                                            htmlFor={`leftCompany_${candidate.CanInterviewsModel.id}`}\r\n                                          >\r\n                                            <GoDotFill\r\n                                              style={{\r\n                                                color: \"#fa9e0a\",\r\n                                                fontSize: 20,\r\n                                              }}\r\n                                            />{\" \"}\r\n                                            Left Company\r\n                                          </label>\r\n                                        </div>\r\n                                      </a>\r\n                                    </li>\r\n                                  )}\r\n                                  <li\r\n                                    onClick={(event) =>\r\n                                      handleRadioBtn(\r\n                                        candidate.CanInterviewsModel.id,\r\n                                        \"callNotAttend\",\r\n                                        event.target.checked\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                      <div\r\n                                        className={`${interviewStyle.select_wrp}`}\r\n                                      >\r\n                                        <input\r\n                                          type=\"checkbox\"\r\n                                          id={`callNotAttend${candidate.CanInterviewsModel.id}`}\r\n                                          name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                          checked={\r\n                                            candidate.CanInterviewsModel\r\n                                              .callNotAttend\r\n                                          }\r\n                                        />\r\n\r\n                                        <label\r\n                                          htmlFor={`callNotAttend${candidate.CanInterviewsModel.id}`}\r\n                                        >\r\n                                          <GoDotFill\r\n                                            style={{\r\n                                              color: \"#00b300\",\r\n                                              fontSize: 20,\r\n                                            }}\r\n                                          />{\" \"}\r\n                                          Call Not Attended\r\n                                        </label>\r\n                                      </div>\r\n                                    </a>\r\n                                  </li>\r\n                                  {(isSuperAdmin || adminIDTwo) && (\r\n                                    <li\r\n                                      onClick={() =>\r\n                                        handleButtonClick(\"rescheduled\")\r\n                                      }\r\n                                    >\r\n                                      <a className=\"dropdown-item\" href=\"#\">\r\n                                        <label\r\n                                          ref={inputRef.rescheduled}\r\n                                          onClick={(e) => {\r\n                                            handleMenuClick(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              e\r\n                                            );\r\n                                          }}\r\n                                        >\r\n                                          <GoDotFill\r\n                                            style={{\r\n                                              color: \"#55559f\",\r\n                                              fontSize: 20,\r\n                                            }}\r\n                                          />{\" \"}\r\n                                          Reschedule\r\n                                        </label>\r\n                                      </a>\r\n                                    </li>\r\n                                  )}\r\n\r\n                                  <li\r\n                                    className=\"\"\r\n                                    onClick={(e) => {\r\n                                      handleInterviewCard();\r\n                                    }}\r\n                                  >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                      <label>\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#55559f\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Interview Card\r\n                                      </label>\r\n                                    </a>\r\n                                  </li>\r\n                                  <li\r\n                                    className=\"\"\r\n                                    onClick={(e) => {\r\n                                      handleInactiveopen();\r\n                                    }}\r\n                                  >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                      <label>\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#F85244\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Inactive\r\n                                      </label>\r\n                                    </a>\r\n                                  </li>\r\n                                </ul>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </>\r\n                ) : (\r\n                  <div className=\"d-flex align-items-center justify-content-center\">\r\n                    {\" \"}\r\n                    <Nojoid />\r\n                  </div>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          {/* </Paper> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-center align-items-center mb-3 position-absolute bottom-0 start-50 translate-middle-x\">\r\n        <Stack spacing={2}>\r\n          <Pagination\r\n            count={pageCount.totalPages}\r\n            variant=\"outlined\"\r\n            shape=\"rounded\"\r\n            color=\"success\"\r\n            onChange={candidatePagination}\r\n          />\r\n        </Stack>\r\n      </div>\r\n      <div className=\"mt-2\"></div>\r\n      {showConfirmPopup && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <div\r\n                  style={{\r\n                    width: \"400px\",\r\n                  }}\r\n                >\r\n                  <Box\r\n                    component=\"form\"\r\n                    sx={{\r\n                      \"& .MuiTextField-root\": { m: 1, width: \"390px\" },\r\n                    }}\r\n                    noValidate\r\n                    autoComplete=\"off\"\r\n                  >\r\n                    <>\r\n                      <div>\r\n                        <div className=\"text-center mb-2\">Add Notes</div>\r\n                        <div>\r\n                          {!(\r\n                            interviewStatus.statusfield === \"isAttended\" ||\r\n                            interviewStatus.statusfield === \"isJoined\" ||\r\n                            interviewStatus.statusfield === \"isSelected\" ||\r\n                            interviewStatus.statusfield === \"callNotAttend\"\r\n                          ) ? (\r\n                            <>\r\n                              <TextField\r\n                                id=\"outlined-multiline-flexible\"\r\n                                label=\"Add Notes\"\r\n                                multiline\r\n                                style={{ width: \"100%\" }}\r\n                                error={isNotesEmpty}\r\n                                helperText={\r\n                                  isNotesEmpty ? \"Notes cannot be empty\" : \"\"\r\n                                }\r\n                                required\r\n                                onChange={(event) => {\r\n                                  setInterviewStatus((prev) => ({\r\n                                    ...prev,\r\n                                    notes: event.target.value,\r\n                                  }));\r\n                                  setIsNotesEmpty(false);\r\n                                }}\r\n                                maxRows={4}\r\n                                fullWidth\r\n                              />\r\n                              {interviewStatus.statusfield ===\r\n                                \"willJoining\" && (\r\n                                <FormControl fullWidth error={isNotesEmpty}>\r\n                                  <LocalizationProvider\r\n                                    dateAdapter={AdapterDayjs}\r\n                                  >\r\n                                    <DatePicker\r\n                                      label=\"Date\"\r\n                                      sx={{ width: \"100%\" }}\r\n                                      className=\"mt-4\"\r\n                                      onChange={(datefeild) => {\r\n                                        console.log(\r\n                                          \"ortiuoDate Field:\",\r\n                                          datefeild.$d\r\n                                        );\r\n                                        setInterviewStatus((prev) => ({\r\n                                          ...prev,\r\n                                          date: datefeild.$d,\r\n                                        }));\r\n                                        setIsNotesEmpty(false);\r\n                                      }}\r\n                                      fullWidth\r\n                                    />\r\n                                    {isNotesEmpty && (\r\n                                      <FormHelperText error>\r\n                                        Please select a date\r\n                                      </FormHelperText>\r\n                                    )}\r\n                                  </LocalizationProvider>\r\n                                </FormControl>\r\n                              )}\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-2\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Close\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={ConfirmFormSubmit}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                  disabled={enablebutton}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <TextField\r\n                                id=\"outlined-multiline-flexible\"\r\n                                label=\"Add Notes\"\r\n                                multiline\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={(event) => {\r\n                                  setInterviewStatus((prev) => ({\r\n                                    ...prev,\r\n                                    notes: event.target.value,\r\n                                  }));\r\n                                  // setIsNotesEmpty(false);\r\n                                  // setShowConfirmPopup(false);\r\n                                }}\r\n                                maxRows={4}\r\n                                fullWidth\r\n                              />\r\n                              {(interviewStatus.statusfield === \"isJoined\" ||\r\n                                interviewStatus.statusfield ===\r\n                                  \"isSelected\") && (\r\n                                <>\r\n                                  <FormControl fullWidth error={isDateSelected}>\r\n                                    {/* error={isNotesEmpty} */}\r\n                                    <LocalizationProvider\r\n                                      dateAdapter={AdapterDayjs}\r\n                                    >\r\n                                      <DatePicker\r\n                                        label=\"Date\"\r\n                                        sx={{ width: \"100%\" }}\r\n                                        className=\"mt-4\"\r\n                                        // value={dayjs(interviewStatus.date)}\r\n\r\n                                        onChange={(datefeild) => {\r\n                                          console.log(\r\n                                            \"odksogdgoDate Field:\",\r\n                                            datefeild.$d\r\n                                          );\r\n                                          setInterviewStatus((prev) => ({\r\n                                            ...prev,\r\n                                            date: datefeild.$d,\r\n                                          }));\r\n                                          setIsDateSelected(false);\r\n                                          // console.log(\r\n                                          //   convertDateYYYYMMDD(datefeild.$d)\r\n                                          // );\r\n                                          // setIsNotesEmpty(false);\r\n                                        }}\r\n                                        // required={\r\n                                        //   interviewStatus.statusfield ===\r\n                                        //   \"isJoined\"\r\n                                        // }\r\n                                        fullWidth\r\n                                        // required\r\n                                      />\r\n                                      {isDateSelected && (\r\n                                        <FormHelperText error>\r\n                                          Please select a date\r\n                                        </FormHelperText>\r\n                                      )}\r\n                                    </LocalizationProvider>\r\n                                  </FormControl>\r\n                                </>\r\n                              )}\r\n                              {interviewStatus.statusfield === \"isJoined\" && (\r\n                                <TextField\r\n                                  id=\"outlined-multiline-flexible\"\r\n                                  label=\"CTC (in rupees)\"\r\n                                  className=\"mt-4\"\r\n                                  style={{ width: \"100%\" }}\r\n                                  onChange={(event) => {\r\n                                    const inputVal = event.target.value;\r\n                                    const isNumber = /^\\d+$/.test(inputVal);\r\n\r\n                                    if (isNumber || inputVal === \"\") {\r\n                                      setInterviewStatus((prev) => ({\r\n                                        ...prev,\r\n                                        ctc: inputVal,\r\n                                      }));\r\n                                      setIsCtc(false);\r\n                                    } else {\r\n                                      setIsCtc(true);\r\n                                    }\r\n                                  }}\r\n                                  error={isCtc}\r\n                                  helperText={\r\n                                    isCtc\r\n                                      ? \"CTC (in rupees) must be a number\"\r\n                                      : \"\"\r\n                                  }\r\n                                  inputProps={{\r\n                                    maxLength: 7,\r\n                                    pattern: \"[0-9]*\",\r\n                                  }} // Set maxLength and pattern for number input\r\n                                  fullWidth\r\n                                />\r\n                              )}\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-2\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Close\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={ConfirmFormSubmitWithoutnotes}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                  disabled={enablebutton}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  </Box>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {interviewCard.show && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <div className=\"d-flex flex-row justify-content-between \">\r\n                  <div>\r\n                    <h2>Download Interview Card </h2>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        setInterviewCard((prev) => ({ ...prev, show: false }));\r\n                      }}\r\n                    >\r\n                      x\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                <div style={{ height: \"80vh\", overflowY: \"scroll\" }}>\r\n                  <div></div>\r\n                  <CandidateInterviewCard interviewId={currentInterviewId} />\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {modalOpen && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <p>\r\n                  Are you sure you want to inactive{\" \"}\r\n                  <strong>\r\n                    {capitalizeWords(candidatename.CandidateModel.firstName)}{\" \"}\r\n                    {capitalizeWords(candidatename.CandidateModel.lastName)}\r\n                  </strong>\r\n                  ?\r\n                </p>\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={() => setModalOpen(false)}\r\n                    style={{\r\n                      borderColor: \"red\",\r\n                      color: \"red\",\r\n                      marginRight: \"10px\",\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"success\"\r\n                    onClick={handleOkButtonClick}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {showSuccess && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={<SuccessTick HeadText=\"Successfully Updated\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showSuccessinactive && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={<SuccessTick HeadText=\"Successfully\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {isRescheduleOpen && (\r\n        <InterviewReschedule\r\n          interviewId={currentInterviewId}\r\n          onSuccess={() => {\r\n            handleReset();\r\n            closeRescheduleModal();\r\n          }}\r\n          onClose={closeRescheduleModal}\r\n          // showModal={true}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ScheduleInterviewFilter","interviewFilter","useSelector","state","interviewListDetails","interviewFilterRedDot","refreshRedDot","isSuperAdmin","adminDetails","roleID","adminIDTwo","localStorage","getItem","initialValues","adminId","jobId","contactNumber","candidateMobileNumber","companyName","jobCategory","city","area","interviewStatus","scheduledBy","filterDetails","create","createdTime","ended","endDate","interviewStart","interviewDate","interviewEnd","interviewEndDate","formData","setFormData","useState","showFilter","setShowFilter","dateRange","setDateRange","start","end","dateFilterType","dateRange1","setDateRange1","interviewdateFilterType","showCustom","setshowCustom","showCustom1","setshowCustom1","validationErrors","setValidationErrors","setAdminDetails","id","adminName","showRedDot","setShowRedDot","Dispatch","useDispatch","errors","setErrors","options","setOptions","useEffect","console","log","size","adminList","setAdminList","page","handleFieldChange","field","value","numbersOnlyTest","prev","length","dateFormate","$d","trim","getJobFilterOptions","then","data","cityOptions","filter","element","category","areaOptions","JobCategoryOptions","GetAllsdminDetails","activeAdmins","item","Deactived","catch","alert","map","userName","adminid","anchorEl","setAnchorEl","React","interviewadatanchor","setInterviewadatanchor","open","Boolean","interviewDateOpen","handleDateSelect","val","selectedOption","today","Date","daysToLastMonday","getDay","lastMonday","setDate","getDate","startDate","toISOString","split","getFullYear","getMonth","yesterday","setHours","handleInterviewDateSelect","tomorrow","handleCustomDate","type","target","handleInterviewCustomDate","handleApply","e","preventDefault","isFormValid","isValid","updateArea","event","updateCity","updateJobCategory","InterviewStatus","label","option","_jsxs","children","_jsx","className","concat","interviewStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","zIndex","childComponent","BoxContainerWidth","_Fragment","interviewListActions","setInterviewFilter","cursor","fontSize","AiOutlineClose","onSubmit","isFilterApplied","setInterviewFilterRedDot","handleSubmit","Stack","TextField","fullWidth","onChange","InputProps","startAdornment","display","alignItems","AiOutlinePhone","marginRight","FormControl","undefined","currentTarget","Menu","onClose","MenuListProps","MenuItem","minWidth","htmlFor","name","Autocomplete","getOptionLabel","reason","filterSelectedOptions","renderInput","params","placeholder","min","max","select","handleAssignToChange","defaultValue","el","handleClear","search","sx","_ref","interviewId","onSuccess","rescheduleDetails","setRescheduleDetails","reScheduledOn","notes","showSuccess","setShowSuccess","showCandidateId","validateForm","newErrors","Object","keys","PostRescheduleInterviews","setTimeout","error","helperText","required","inputProps","maxLength","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","minDate","dayjs","slotProps","textField","date","marginTop","multiline","maxRows","Button","color","SuccessTick","HeadText","StyledTableCell","styled","TableCell","tableCellClasses","head","maxWidth","padding","body","RecentActivity","rescheduledDateTime","joinedOn","selectedOn","notSelectedOn","offerRejectedOn","notAttendedOn","attendedOn","leftTheCompanyAt","awaitingOn","willJoiningOn","callNotAttendOn","replace","mostRecentDate","mostRecentKey","key","dateStr","includes","currentDate","Selected","Notselected","NotAttended","rejected_label","joined","rescheduledChips","Attended","leftCompany","willJoining","Awaitingchips","callNotAttend","CandidateInterviewTable","_ref2","isSmallScreen","isWidthDown","isRescheduleOpen","setIsRescheduleOpen","showLoader","setShowLoader","CandidateInterviewList","setCandidateInterviewList","isChecked","setIsChecked","enablebutton","setenablebutton","showConfirmPopup","setShowConfirmPopup","totalCount","setTotalCount","currentInterviewId","setCurrentInterviewId","interviewCard","setInterviewCard","show","candidatename","setcandidate","contactPersonName","setContactPersonName","contactID","setcontactID","modalOpen","setModalOpen","showSuccessinactive","setshowSuccessinactive","pageCount","setPageCount","totalPages","currentPage","setOpen","isNotesEmpty","setIsNotesEmpty","isCtc","setIsCtc","isDateSelected","setIsDateSelected","setInterviewStatus","caninterviewid","statusfield","ctc","inputRef","attended","useRef","notAttended","selected","notSelected","offerRejected","rescheduled","isAwaiting","handleCloseNotes","handleReset","interviewCurrentStatus","GetcanInterviews","InterviewList","canInterviewList","Math","ceil","finally","handleRadioBtn","candidateId","statusFieldName","selectedCandidate","find","candidate","CanInterviewsModel","CandidateModel","firstName","handlePopupDetails","commonPopupActions","setShowPopup","copyToClipboard","text","document","createElement","innerText","appendChild","execCommand","removeChild","setInterviewFilterShceduleBy","closeRescheduleModal","setAdminName","setAdminId","adminNames","adminIds","FilterHead","setInterviewFilterSize","candidateSize","canLeadStyle","filterAdduser","LuRefreshCcw","Backdrop","theme","drawer","CircularProgress","Container","responsive","TableContainer","Table","stickyHeader","TableDetails","TableHead","TableRow","align","TableBody","i","_candidate$CandidateM","_candidate$CandidateM2","border","title","async","getcandidateDetails","getCandidateLead","handleCandidateDetails","textTruncate","capitalizeWords","lastName","mobileNumber","String","slice","JobModel","EmployerModel","indexOf","DMMMYYYY_formate","dateValue","rescheduledDate","Popper","chips_wrp","Attended_wrp","checked","Tooltip","NotAttended_wrp","Selected_wrp","willJoining_wrp","callNotAttend_wrp","awaiting_wrp","awaiting","NotSelected_wrp","OfferRejected_wrp","Joined_wrp","LeftCompany_wrp","leftTheCompany","background","outline","position","right","BsThreeDotsVertical","textAlign","href","select_wrp","GoDotFill","refName","ref","current","click","handleButtonClick","Nojoid","spacing","Pagination","count","shape","setInterviewFilterPage","Box","component","m","noValidate","autoComplete","datefeild","FormHelperText","PutInterviewStatus","disabled","inputVal","test","pattern","overflowY","CandidateInterviewCard","justifyContent","borderColor","PostinterviewInactive","InterviewReschedule"],"sourceRoot":""}